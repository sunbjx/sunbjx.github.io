<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>北极熊</title>
  
  <subtitle>阳光下的北极熊</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/"/>
  <updated>2018-01-03T13:47:02.000Z</updated>
  <id>http://博客说写.我爱你/</id>
  
  <author>
    <name>sunbjx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu网络管理</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2018/01/03/Ubuntu%E7%BD%91%E7%BB%9C%E7%AE%A1%E7%90%86/"/>
    <id>http://博客说写.我爱你/2018/01/03/Ubuntu网络管理/</id>
    <published>2018-01-03T12:58:48.000Z</published>
    <updated>2018-01-03T13:47:02.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="网络重启"><a href="#网络重启" class="headerlink" title="网络重启"></a>网络重启</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service network-manager restart</div></pre></td></tr></table></figure><h1 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h1><p>Linux里面有两套管理网络连接的方案：</p><ul><li><code>/etc/network/interfaces</code>也就是<code>/etc/init.d/networking</code></li><li><code>Network_Manager</code></li></ul><blockquote><p>这两套方案冲突，不能并存。<br>第一个方案适用于没有X的环境，如：服务器；或者那些完全不需要改动连接的场合。<br>第二套方案使用于有桌面的环境，特别是笔记本，搬来搬去，网络连接情况随时会变的。</p></blockquote><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><ul><li>局域网设置固定IP达到局域网互联，同时连接无线网络达到外网访问。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/network/interfaces</div><div class="line"></div><div class="line"><span class="comment"># 添加内容：</span></div><div class="line">auto eth0</div><div class="line">iface eth0 inet static</div><div class="line">address 192.168.1.100    </div><div class="line">netmask 255.255.255.0</div><div class="line">gateway 192.168.2.1</div><div class="line"></div><div class="line"><span class="comment"># 方案一： 网卡的配置文件里面加dns-nameservers xxx.xxx.xxx.xxx之类信息</span></div><div class="line">dns-nameserver 192.168.2.1</div><div class="line"></div><div class="line"><span class="comment"># 方案二：修改 resolvconf服务的配置文件</span></div><div class="line">$ sudo vim /etc/resolvconf/resolv.conf.d/head(或者base）</div><div class="line"></div><div class="line"><span class="comment"># 加入所需的域名服务器</span></div><div class="line">nameserver xxx.xxx.xxx.xxx</div><div class="line"></div><div class="line">$ resolvconf -u</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo vim /etc/NetworkManager/NetworkManager.conf</div><div class="line"></div><div class="line">将 managed=<span class="literal">false</span> 改成<span class="literal">true</span> 交给NM托管</div></pre></td></tr></table></figure><p>执行重启网络命令后，在Wi-Fi图标处切换网络类型就好。</p><font color="red">注：<code>eth0</code> 是你的网卡名称，通过 <code>ifconfig</code> 查看<br><br>如果是在 <code>/etc/resolv.conf</code> 添加 <code>DNS</code>，由于Ubuntu 有一个 <code>esolvconf</code> 服务，如果重启它，那么 <code>/etc/resolv.conf</code> 的内容会被修改成默认的样子.<br><br>默认 <code>/etc/NetworkManager/NetworkManager.conf</code> 里面 <code>managed</code> 是 <code>false</code>。所以会显示未托管。<br></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;网络重启&quot;&gt;&lt;a href=&quot;#网络重启&quot; class=&quot;headerlink&quot; title=&quot;网络重启&quot;&gt;&lt;/a&gt;网络重启&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre
      
    
    </summary>
    
      <category term="devops" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/"/>
    
      <category term="Ubuntu" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/Ubuntu/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker部署Jenkins</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/10/12/Docker%E9%83%A8%E7%BD%B2Jenkins/"/>
    <id>http://博客说写.我爱你/2017/10/12/Docker部署Jenkins/</id>
    <published>2017-10-12T03:11:26.000Z</published>
    <updated>2017-10-12T03:37:55.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自定义Dockerfile"><a href="#自定义Dockerfile" class="headerlink" title="自定义Dockerfile"></a>自定义Dockerfile</h3><p>注意我们可不能pull下来直接用！因为jenkins默认要使用两个端口：8080和50000，而8080这个端口可能被其它占用</p><p>我们也不必把Jenkins的Dockerfile下下来自己改。别忘了Docker的镜像是分层存储的，我们只要在Jenkins上继续搭建一个Dockerfile就可以了。<br>自己生成一个Dockerfile，内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">FROM jenkins/jenkins:lts</div><div class="line"></div><div class="line">MAINTAINER sunbjx &lt;icebear-bjx@outlook.com&gt;</div><div class="line">  </div><div class="line">ENV JENKINS_OPTS --httpPort=9527</div><div class="line">EXPOSE 9527:9527</div><div class="line">EXPOSE 50000:50000</div></pre></td></tr></table></figure><p>注意</p><blockquote><p>这里ENV JENKINS_OPTS –httpPort=9527是给Jenkins传的参数。如果docker -p 9527:8080，那么之后Jenkins页面上的连接都会指向JENKINS:8080，Web内链就损坏了。必须用ENV告诉Jenkins端口换成9527了</p></blockquote><p>执行如下命令 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker build -t &apos;jenkins-sunbjx&apos; .</div></pre></td></tr></table></figure><p>系统就会制作一个属于我们自己的，端口为9527的jenkins。</p><h3 id="运行自定义生成的镜像-jenkins-sunbjx"><a href="#运行自定义生成的镜像-jenkins-sunbjx" class="headerlink" title="运行自定义生成的镜像 jenkins-sunbjx"></a>运行自定义生成的镜像 jenkins-sunbjx</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">docker run -d \</div><div class="line">-p 9527:9527 \</div><div class="line">-p 50000:50000 \</div><div class="line">--name jenkins \</div><div class="line">--restart always \</div><div class="line">--link gitlab:gitlab.sunbjx.com \</div><div class="line">-u root \</div><div class="line">-v /var/jenkins_home:/var/jenkins_home  \</div><div class="line">-v /opt/apache-maven-3.5.0:/usr/local/maven \</div><div class="line">-v /usr/lib/jdk1.8.0_141:/usr/local/jdk \</div><div class="line">jenkins-sunbjx</div></pre></td></tr></table></figure><p>说明</p><blockquote><p>9527 端口是jenkins的端口，5000端口是master和slave通信端口（没错，jenkins可以部署集群,在本次中没有配置）</p><p> 将宿主机maven和jdk映射到对应的容器目录上，同时通过配置–link连接gitlab，因为要从gitlab下代码。</p><p>初次启动的时候，可以通过<code>$ docker logs -f jenkins</code>查看控制台的密码，通过这个密码登录系统，执行创建用户等操作</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;自定义Dockerfile&quot;&gt;&lt;a href=&quot;#自定义Dockerfile&quot; class=&quot;headerlink&quot; title=&quot;自定义Dockerfile&quot;&gt;&lt;/a&gt;自定义Dockerfile&lt;/h3&gt;&lt;p&gt;注意我们可不能pull下来直接用！因为jenkins
      
    
    </summary>
    
      <category term="devops" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/"/>
    
      <category term="docker" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker部署Gitlab</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/10/12/Docker%E9%83%A8%E7%BD%B2Gitlab/"/>
    <id>http://博客说写.我爱你/2017/10/12/Docker部署Gitlab/</id>
    <published>2017-10-12T01:46:52.000Z</published>
    <updated>2017-10-12T03:11:33.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull gitlab/gitlab-ce</div></pre></td></tr></table></figure><h3 id="启动应用"><a href="#启动应用" class="headerlink" title="启动应用"></a>启动应用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ docker run -d -h gitlab.sunbjx.com \</div><div class="line">-p 80:80 \</div><div class="line">-v /etc/gitlab/:/etc/gitlab/ \</div><div class="line">-v /var/log/gitlab/:/var/log/gitlab/ \</div><div class="line">-v /var/opt/gitlab/:/var/opt/gitlab/ \</div><div class="line">--name gitlab \</div><div class="line">docker.io/gitlab/gitlab-ce</div></pre></td></tr></table></figure><blockquote><p>本次启用是为了生成配置文件。</p><ul><li>/etc/gitlab/：配置文件所在的目录</li><li>/var/log/gitlab：日志所在目录</li><li>/var/opt/gitlab：数据所在目录</li><li>生成端口：80(访问端口) 22(ssh端口) 8080(unicorn端口)</li></ul></blockquote><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/gitlab/gitlab.rb</div><div class="line"></div><div class="line"># 修改gitlab访问端口(默认80)</div><div class="line">external_url &apos;http://公网hostname:9090&apos;</div><div class="line"></div><div class="line"># 修改unicorn端口(默认8080),如果8080端口被其他程序占用。那么unicorn就会无法启动，显示为502错误，”GitLab is not responding”。</div><div class="line">unicorn[&apos;listen&apos;] = &apos;127.0.0.1&apos;</div><div class="line">unicorn[&apos;port&apos;] = 9092</div></pre></td></tr></table></figure><h3 id="指定端口启动"><a href="#指定端口启动" class="headerlink" title="指定端口启动"></a>指定端口启动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">$ systemctl daemon-reload</div><div class="line"># 删掉最开始启动的容器</div><div class="line">$ docker ps </div><div class="line">$ docker stop gitlab</div><div class="line">$ docker rm gitlab</div><div class="line"></div><div class="line"># 启动如下</div><div class="line">$ docker run -d -h gitlab.sunbjx.com \</div><div class="line"> -p 9090:9090 \</div><div class="line"> -p 9091:22 \</div><div class="line"> -v /etc/gitlab/:/etc/gitlab/ \</div><div class="line"> -v /var/log/gitlab/:/var/log/gitlab/ \</div><div class="line"> -v /var/opt/gitlab/:/var/opt/gitlab/ \</div><div class="line">--name gitlab \</div><div class="line">--restart always \</div><div class="line">docker.io/gitlab/gitlab-ce:latest</div></pre></td></tr></table></figure><p>说明</p><blockquote><p>-h gitlab.sunbjx.com</p><p>hostname：以gitlab.sunbjx.com作为域名访问gitlab，需要在DNS中进行域名映射（或者在访问机器/etc/hosts中配置域名映射）</p><p>-p 9090:9090 (9090：http端口)</p><p>-p 9091:22 (22：ssh端口，ssh端口不要随便替换，代价会比较大，这样之后，发现clone是可以的，但是push不行)</p></blockquote><p>注意：如果有ipv4无法forward的问题，先使用：<code>$ sysctl -w net.ipv4.ip_forward=1</code></p><h3 id="浏览器访问"><a href="#浏览器访问" class="headerlink" title="浏览器访问"></a>浏览器访问</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/hosts</div><div class="line"># 添加如下一行内容</div><div class="line">192.168.1.10  gitlab.sunbjx.com</div></pre></td></tr></table></figure><ul><li><a href="http://192.168.1.10:9090/（或者http://gitlab.sunbjx.com:9090/）" target="_blank" rel="external">http://192.168.1.10:9090/（或者http://gitlab.sunbjx.com:9090/）</a></li><li>其中，192.168.1.10是gitlab所在机器的地址</li></ul><h3 id="默认管理员账号"><a href="#默认管理员账号" class="headerlink" title="默认管理员账号"></a>默认管理员账号</h3><p>Username: root</p><p>Password: 5iveL!fe</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;下载镜像&quot;&gt;&lt;a href=&quot;#下载镜像&quot; class=&quot;headerlink&quot; title=&quot;下载镜像&quot;&gt;&lt;/a&gt;下载镜像&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="devops" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/"/>
    
      <category term="docker" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker之Device mapper</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/10/11/Docker%E4%B9%8BDevice-mapper/"/>
    <id>http://博客说写.我爱你/2017/10/11/Docker之Device-mapper/</id>
    <published>2017-10-11T13:57:39.000Z</published>
    <updated>2017-10-11T16:14:21.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是-Device-Mapper"><a href="#什么是-Device-Mapper" class="headerlink" title="什么是 Device Mapper"></a>什么是 Device Mapper</h3><p><a href="http://www.ibm.com/developerworks/cn/linux/l-devmapper/index.html" target="_blank" rel="external"><font color="red">参考文档：Linux 内核中的 Device Mapper 机制</font></a></p><h4 id="devicemapper的简介"><a href="#devicemapper的简介" class="headerlink" title="devicemapper的简介"></a>devicemapper的简介</h4><p>docker官方给出的存储方案优劣对比:</p><p><img src="/2017/10/11/Docker之Device-mapper/plan.png" alt=""></p><p>Device Mapper是Linux的一种技术框架，而devicemapper是Docker Engine基于Device Mapper提供的一种存储驱动。</p><p>早期的Docker运行在Ubuntu和Debian Linux上并使用AUFS作为后端存储。Docker流行之后，越来越多的的公司希望在Red Hat Enterprise Linux这类企业级的操作系统上面运行Docker，但可惜的是RHEL的内核并不支持AUFS。</p><p>这个时候红帽公司出手了，决定和Docker公司合作去开发一种基于Device Mapper技术的后端存储，也就是现在的devicemapper。</p><p>devicemapper驱动将每一个Docker镜像和容器存储在它自身的具有精简置备(thin-provisioned)、写时拷贝(copy-on-write)和快照功能(snapshotting)的虚拟设备上。由于Device Mapper技术是在块(block)层面而非文件层面，所以Docker Engine的devicemapper存储驱动使用的是块设备来存储数据而非文件系统。</p><h4 id="devicemapper的模式"><a href="#devicemapper的模式" class="headerlink" title="devicemapper的模式"></a>devicemapper的模式</h4><p>devicemapper是RHEL下Docker Engine的默认存储驱动，它有两种配置模式:loop-lvm和direct-lvm。</p><ul><li><p><code>loop-lvm</code>是默认的模式，它使用OS层面离散的文件来构建精简池(thin pool)。该模式主要是设计出来让Docker能够简单的被”开箱即用(out-of-the-box)”而无需额外的配置。</p></li><li><p><code>direct-lvm</code>是Docker推荐的生产环境的推荐模式，他使用块设备来构建精简池来存放镜像和容器的数据。</p></li></ul><h4 id="为什么使用devicemapper"><a href="#为什么使用devicemapper" class="headerlink" title="为什么使用devicemapper"></a>为什么使用devicemapper</h4><p>由于是公司生产服务器不好做内核升级(Centos7.3当前内核3.10)而且是多块云盘，以下是官网说明</p><p><a href="https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/#configure-direct-lvm-mode-for-production" target="_blank" rel="external"><font color="red">参考文档：Use the Device Mapper storage driver</font></a></p><p><img src="/2017/10/11/Docker之Device-mapper/whyuse.png" alt="官网说明"></p><h3 id="多块设备下的配置"><a href="#多块设备下的配置" class="headerlink" title="多块设备下的配置"></a>多块设备下的配置</h3><p><a href="http://blog.chinaunix.net/uid-23511971-id-320264.html" target="_blank" rel="external"><font color="red">参考文档：Linux中的LVM</font></a>，<br><a href="http://blog.csdn.net/wuweilong/article/details/7538634" target="_blank" rel="external"><font color="red">Linux下分区详解之–Fdisk</font></a></p><h4 id="停止-Docker"><a href="#停止-Docker" class="headerlink" title="停止 Docker"></a>停止 Docker</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ systemctl stop docker</div></pre></td></tr></table></figure><h4 id="安装以下软件包"><a href="#安装以下软件包" class="headerlink" title="安装以下软件包"></a>安装以下软件包</h4><blockquote><p>RHEL / CentOS: <code>device-mapper-persistent-data</code>, <code>lvm2</code>, and all dependencies</p><p>Ubuntu / Debian: <code>thin-provisioning-tools</code>, <code>lvm2</code>, and all dependencies</p></blockquote><h4 id="创建物理卷-pv"><a href="#创建物理卷-pv" class="headerlink" title="创建物理卷 pv"></a>创建物理卷 pv</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ pvcreate /dev/xvdb</div><div class="line"></div><div class="line">Physical volume &quot;/dev/xvdb&quot; successfully created.</div></pre></td></tr></table></figure><h4 id="在同一设备上创建一个-docker-卷组-vg"><a href="#在同一设备上创建一个-docker-卷组-vg" class="headerlink" title="在同一设备上创建一个 docker 卷组 vg"></a>在同一设备上创建一个 <code>docker</code> 卷组 vg</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vgcreate docker /dev/xvdb</div><div class="line"></div><div class="line">Volume group &quot;docker&quot; successfully created</div></pre></td></tr></table></figure><h4 id="创建thinpool，thinpoolmeta两个逻辑卷-lv"><a href="#创建thinpool，thinpoolmeta两个逻辑卷-lv" class="headerlink" title="创建thinpool，thinpoolmeta两个逻辑卷 lv"></a>创建<code>thinpool</code>，<code>thinpoolmeta</code>两个逻辑卷 lv</h4><blockquote><p>数据LV大小为VG的95%,元数据LV大小为VG的1%,剩余的空间用来自动扩展。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ lvcreate --wipesignatures y -n thinpool docker -l 95%VG</div><div class="line"></div><div class="line">Logical volume &quot;thinpool&quot; created.</div><div class="line"></div><div class="line">$ lvcreate --wipesignatures y -n thinpoolmeta docker -l 1%VG</div><div class="line"></div><div class="line">Logical volume &quot;thinpoolmeta&quot; created.</div></pre></td></tr></table></figure><h4 id="将pool-转换为thin-pool-将-thinpool-lv的-chunksize-改为-512KB-并且将前-4KB-字节清零。"><a href="#将pool-转换为thin-pool-将-thinpool-lv的-chunksize-改为-512KB-并且将前-4KB-字节清零。" class="headerlink" title="将pool 转换为thin-pool 将 thinpool lv的 chunksize 改为 512KB,并且将前 4KB 字节清零。"></a>将<code>pool</code> 转换为<code>thin-pool</code> 将 <code>thinpool</code> lv的 chunksize 改为 512KB,并且将前 4KB 字节清零。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ lvconvert -y \</div><div class="line">--zero n \</div><div class="line">-c 512K \</div><div class="line">--thinpool docker/thinpool \</div><div class="line">--poolmetadata docker/thinpoolmeta</div><div class="line"></div><div class="line">WARNING: Converting logical volume docker/thinpool and docker/thinpoolmeta to</div><div class="line">thin pool&apos;s data and metadata volumes with metadata wiping.</div><div class="line">THIS WILL DESTROY CONTENT OF LOGICAL VOLUME (filesystem etc.)</div><div class="line">Converted docker/thinpool to thin pool.</div></pre></td></tr></table></figure><h4 id="创建一个thinpool的profile"><a href="#创建一个thinpool的profile" class="headerlink" title="创建一个thinpool的profile"></a>创建一个thinpool的profile</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/lvm/profile/docker-thinpool.profile</div><div class="line"># 配置池的自动扩展</div><div class="line">activation &#123;</div><div class="line">  thin_pool_autoextend_threshold=80</div><div class="line">  thin_pool_autoextend_percent=20</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="应用配置"><a href="#应用配置" class="headerlink" title="应用配置"></a>应用配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ lvchange --metadataprofile docker-thinpool docker/thinpool</div><div class="line"></div><div class="line">Logical volume docker/thinpool changed.</div></pre></td></tr></table></figure><h4 id="查看lv状态"><a href="#查看lv状态" class="headerlink" title="查看lv状态"></a>查看lv状态</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ lvs -o+seg_monitor</div><div class="line"></div><div class="line">LV       VG     Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert Monitor</div><div class="line">thinpool docker twi-a-t--- 95.00g             0.00   0.01</div></pre></td></tr></table></figure><h4 id="修改服务配置文件"><a href="#修改服务配置文件" class="headerlink" title="修改服务配置文件"></a>修改服务配置文件</h4><blockquote><p>Note: The deferred deletion option, dm.use_deferred_deletion=true, is not yet supported on RHEL, CentOS, or Ubuntu 14.04 when using the default kernel. Support was added in the upstream kernel version 3.18.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/docker/daemon.json</div><div class="line"># 配置如下</div><div class="line">&#123;</div><div class="line">    &quot;storage-driver&quot;: &quot;devicemapper&quot;,</div><div class="line">    &quot;storage-opts&quot;: [</div><div class="line">    &quot;dm.thinpooldev=/dev/mapper/docker-thinpool&quot;,</div><div class="line">    &quot;dm.use_deferred_removal=true&quot;,</div><div class="line">    &quot;dm.use_deferred_deletion=true&quot;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="清除Graphdriver"><a href="#清除Graphdriver" class="headerlink" title="清除Graphdriver"></a>清除Graphdriver</h4><p>在启动docker之前，需要将之前残留的docker文件删除掉，如果不删除，则会遇到以下的错误导致docker服务起不来</p><blockquote><p>Error starting daemon: error initializing graphdriver: devmapper: Base Device UUID and Filesystem verification failed: devicemapper: Error running deviceCreate (ActivateDevice) dm_task_run failed</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm -rf /var/lib/docker/*</div></pre></td></tr></table></figure><h4 id="启动Docker服务"><a href="#启动Docker服务" class="headerlink" title="启动Docker服务"></a>启动Docker服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ systemctl daemon-reload</div><div class="line">$ systemctl start docker</div></pre></td></tr></table></figure><h4 id="检查devicemapper配置"><a href="#检查devicemapper配置" class="headerlink" title="检查devicemapper配置"></a>检查devicemapper配置</h4><p>查看 devicemapper 的资源,发现 docker-thinpool 与 docker info 显示的 Pool Name 一致,代表启用<br>direct-lvm 成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ docker info</div><div class="line"></div><div class="line">...</div><div class="line">Storage Driver: devicemapper</div><div class="line"> Pool Name: docker-thinpool</div><div class="line">...</div></pre></td></tr></table></figure><h3 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h3><h4 id="创建物理卷报错Can’t-open-dev-sdb5-exclusively-Mounted-filesystem的问题解决"><a href="#创建物理卷报错Can’t-open-dev-sdb5-exclusively-Mounted-filesystem的问题解决" class="headerlink" title="创建物理卷报错Can’t open /dev/sdb5 exclusively. Mounted filesystem的问题解决"></a>创建物理卷报错Can’t open /dev/sdb5 exclusively. Mounted filesystem的问题解决</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ dmsetup remove_all</div></pre></td></tr></table></figure><h4 id="Linux下lvm中PV丢失找回方法"><a href="#Linux下lvm中PV丢失找回方法" class="headerlink" title="Linux下lvm中PV丢失找回方法"></a>Linux下lvm中PV丢失找回方法</h4><p>查看 pv 显示<code>unknown device</code>，还会有警告信息如下</p><blockquote><p>WARNING: Device for PV <strong><strong>**</strong></strong> not found or rejected by a filter.</p></blockquote><p>Linux的LVM会默认存储用户对PV/VG/LV的每一步操作，并自动把当前的VG的信息备份到一个文件里面，位置是 <code>/etc/lvm/backup/VG名</code>。</p><p>这个文件里面记录的东西大概跟vgdisplay/pvdisplay/lvdisplay输出的信息一致，里 面也包括了对于恢复VG信息至关重要的PV UUID。</p><p>这个文件记录的信息大概就相当于整个VG的元数据，这个文件非常重要，我们就是通过这个文件来恢复整个VG的信息的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/lvm/backup/docker</div><div class="line"></div><div class="line"># 查看 VG 卷组的 PV 信息</div><div class="line">docker &#123;</div><div class="line">id = &quot;MgiuzY-hfqM-e1JL-d4wX-Ukv0-1utX-6bFRfI&quot;</div><div class="line">seqno = 6</div><div class="line">format = &quot;lvm2&quot;# informational</div><div class="line">status = [&quot;RESIZEABLE&quot;, &quot;READ&quot;, &quot;WRITE&quot;]</div><div class="line">flags = []</div><div class="line">extent_size = 8192# 4 Megabytes</div><div class="line">max_lv = 0</div><div class="line">max_pv = 0</div><div class="line">metadata_copies = 0</div><div class="line"></div><div class="line">physical_volumes &#123;</div><div class="line"></div><div class="line">pv0 &#123;</div><div class="line">id = &quot;1cGgpZ-n6q4-mWuJ-DBNB-ceV1-0uf9-II9ez6&quot;</div><div class="line">device = &quot;/dev/xvdb&quot;# Hint only</div><div class="line"></div><div class="line">status = [&quot;ALLOCATABLE&quot;]</div><div class="line">flags = []</div><div class="line">dev_size = 209715200# 100 Gigabytes</div><div class="line">pe_start = 2048</div><div class="line">pe_count = 25599# 99.9961 Gigabytes</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">logical_volumes &#123;</div><div class="line"></div><div class="line">thinpool &#123;</div><div class="line">id = &quot;qwX9S3-iasD-IjQY-8cVO-8Wbn-Vy5Z-NXLKsJ&quot;</div><div class="line">status = [&quot;READ&quot;, &quot;WRITE&quot;, &quot;VISIBLE&quot;]</div><div class="line">flags = []</div><div class="line">creation_time = 1507705341# 2017-10-11 15:02:21 +0800</div><div class="line">creation_host = &quot;iZbp1hbcn6pfg6rxmntsm5Z&quot;</div><div class="line">profile = &quot;docker-thinpool&quot;</div><div class="line">segment_count = 1</div><div class="line"></div><div class="line">segment1 &#123;</div><div class="line">start_extent = 0</div><div class="line">extent_count = 24319# 94.9961 Gigabytes</div><div class="line"></div><div class="line">type = &quot;thin-pool&quot;</div><div class="line">metadata = &quot;thinpool_tmeta&quot;</div><div class="line">pool = &quot;thinpool_tdata&quot;</div><div class="line">transaction_id = 0</div><div class="line">chunk_size = 1024# 512 Kilobytes</div><div class="line">discards = &quot;passdown&quot;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">thinpool_tdata &#123;</div><div class="line">id = &quot;vDzqYX-Lsom-hXT1-AdMv-eV7c-EP4P-hOaM3q&quot;</div><div class="line">status = [&quot;READ&quot;, &quot;WRITE&quot;]</div><div class="line">flags = []</div><div class="line">creation_time = 1507705303# 2017-10-11 15:01:43 +0800</div><div class="line">creation_host = &quot;iZbp1hbcn6pfg6rxmntsm5Z&quot;</div><div class="line">segment_count = 1</div><div class="line"></div><div class="line">segment1 &#123;</div><div class="line">start_extent = 0</div><div class="line">extent_count = 24319# 94.9961 Gigabytes</div><div class="line"></div><div class="line">type = &quot;striped&quot;</div><div class="line">stripe_count = 1# linear</div><div class="line"></div><div class="line">stripes = [</div><div class="line">&quot;pv0&quot;, 0</div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">thinpool_tmeta &#123;</div><div class="line">id = &quot;SG2Six-Gm4A-PuNp-DdNY-p0Qm-1uxs-hML1Oc&quot;</div><div class="line">status = [&quot;READ&quot;, &quot;WRITE&quot;]</div><div class="line">flags = []</div><div class="line">creation_time = 1507705312# 2017-10-11 15:01:52 +0800</div><div class="line">creation_host = &quot;iZbp1hbcn6pfg6rxmntsm5Z&quot;</div><div class="line">segment_count = 1</div><div class="line"></div><div class="line">segment1 &#123;</div><div class="line">start_extent = 0</div><div class="line">extent_count = 255# 1020 Megabytes</div><div class="line"></div><div class="line">type = &quot;striped&quot;</div><div class="line">stripe_count = 1# linear</div><div class="line"></div><div class="line">stripes = [</div><div class="line">&quot;pv0&quot;, 24319</div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">lvol0_pmspare &#123;</div><div class="line">id = &quot;0YYogn-ED8d-dAzt-QZYA-cuNs-JeMR-abBUNU&quot;</div><div class="line">status = [&quot;READ&quot;, &quot;WRITE&quot;]</div><div class="line">flags = []</div><div class="line">creation_time = 1507705341# 2017-10-11 15:02:21 +0800</div><div class="line">creation_host = &quot;iZbp1hbcn6pfg6rxmntsm5Z&quot;</div><div class="line">segment_count = 1</div><div class="line"></div><div class="line">segment1 &#123;</div><div class="line">start_extent = 0</div><div class="line">extent_count = 255# 1020 Megabytes</div><div class="line"></div><div class="line">type = &quot;striped&quot;</div><div class="line">stripe_count = 1# linear</div><div class="line"></div><div class="line">stripes = [</div><div class="line">&quot;pv0&quot;, 24574</div><div class="line">]</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"># 使用原来的PV UUID来创建PV，并使用自动备份的文件来恢复信息</div><div class="line">$ pvcreate /dev/xvdb -u 1cGgpZ-n6q4-mWuJ-DBNB-ceV1-0uf9-II9ez6 --restorefile /etc/lvm/backup/docker</div><div class="line"></div><div class="line"># 恢复datavg的vg信息</div><div class="line">$ vgcfgrestore docker</div><div class="line">$ vgs &amp;&amp; pvs &amp;&amp; lvs</div><div class="line"></div><div class="line"># 激活 VG</div><div class="line">$ vgchange -ay docker</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是-Device-Mapper&quot;&gt;&lt;a href=&quot;#什么是-Device-Mapper&quot; class=&quot;headerlink&quot; title=&quot;什么是 Device Mapper&quot;&gt;&lt;/a&gt;什么是 Device Mapper&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;h
      
    
    </summary>
    
      <category term="devops" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/"/>
    
      <category term="docker" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>Docker优化配置</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/30/Docker%E4%BC%98%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://博客说写.我爱你/2017/09/30/Docker优化配置/</id>
    <published>2017-09-30T08:48:57.000Z</published>
    <updated>2017-09-30T10:05:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="镜像加速器"><a href="#镜像加速器" class="headerlink" title="镜像加速器"></a>镜像加速器</h3><p><a href="https://cr.console.aliyun.com/#/accelerator" target="_blank" rel="external">阿里云加速器</a></p><p>注册用户并且申请加速器，会获得如 <code>https://jxus37ad.mirror.aliyuncs.com</code> 这样的地址。我们需要将其配置给 Docker 引擎。</p><h4 id="Ubuntu-14-04、Debian-7-Wheezy"><a href="#Ubuntu-14-04、Debian-7-Wheezy" class="headerlink" title="Ubuntu 14.04、Debian 7 Wheezy"></a>Ubuntu 14.04、Debian 7 Wheezy</h4><p>对于使用 <code>systemd</code> 的系统，用 <code>systemctl enable docker</code> 启用服务后，编辑 <code>/etc/systemd/system/multi-user.target.wants/docker.service</code> 文件，找到 <code>ExecStart=</code>这一行，在这行最后添加加速器地址 <code>--registry-mirror=&lt;加速器地址&gt;</code>，如：</p><blockquote><p>ExecStart=/usr/bin/dockerd –registry-mirror=<a href="https://jxus37ad.mirror.aliyuncs.com" target="_blank" rel="external">https://jxus37ad.mirror.aliyuncs.com</a></p></blockquote><p>重新加载配置并且重新启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo systemctl daemon-reload</div><div class="line">$ sudo systemctl restart docker</div></pre></td></tr></table></figure><h4 id="Ubuntu-16-04、Debian-8-Jessie、CentOS-7"><a href="#Ubuntu-16-04、Debian-8-Jessie、CentOS-7" class="headerlink" title="Ubuntu 16.04、Debian 8 Jessie、CentOS 7"></a>Ubuntu 16.04、Debian 8 Jessie、CentOS 7</h4><p>对于使用 <code>upstart</code> 的系统而言，编辑 <code>/etc/default/docker</code> 文件，在其中的 DOCKER_OPTS 中添加获得的加速器配置 <code>--registry-mirror=&lt;加速器地址&gt;</code>，如：</p><blockquote><p>DOCKER_OPTS=”–registry-mirror=<a href="https://jxus37ad.mirror.aliyuncs.com" target="_blank" rel="external">https://jxus37ad.mirror.aliyuncs.com</a>“</p></blockquote><p>重新启动服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service docker restart</div></pre></td></tr></table></figure><h4 id="检查加速器是否生效"><a href="#检查加速器是否生效" class="headerlink" title="检查加速器是否生效"></a>检查加速器是否生效</h4><p>Linux系统下配置完加速器需要检查是否生效，在命令行执行 <code>ps -ef | grep dockerd</code>，如果从结果中看到了配置的 <code>--registry-mirror</code> 参数说明配置成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo ps -ef | grep dockerd</div><div class="line">root      5346     1  0 19:03 ?        00:00:00 /usr/bin/dockerd --registry-mirror=https://jxus37ad.mirror.aliyuncs.com</div></pre></td></tr></table></figure><p>如果Docker版本大于1.13或17.05.0-ce，也可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo docker info|grep &quot;Registry Mirrors&quot; -A 1</div><div class="line">Registry Mirrors:</div><div class="line"> https://registry.docker-cn.com/</div></pre></td></tr></table></figure><h3 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h3><font color="red">待续（研究中。。。）</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;镜像加速器&quot;&gt;&lt;a href=&quot;#镜像加速器&quot; class=&quot;headerlink&quot; title=&quot;镜像加速器&quot;&gt;&lt;/a&gt;镜像加速器&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://cr.console.aliyun.com/#/accelerator&quot; targ
      
    
    </summary>
    
      <category term="devops" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/"/>
    
      <category term="docker" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>理解消息通信之RabbitMQ</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/26/%E7%90%86%E8%A7%A3%E6%B6%88%E6%81%AF%E9%80%9A%E4%BF%A1%E4%B9%8BRabbitMQ/"/>
    <id>http://博客说写.我爱你/2017/09/26/理解消息通信之RabbitMQ/</id>
    <published>2017-09-26T08:58:21.000Z</published>
    <updated>2017-09-27T04:00:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="消费者和生产者"><a href="#消费者和生产者" class="headerlink" title="消费者和生产者"></a>消费者和生产者</h3><blockquote><p><code>RabbitMQ</code> 在应用程序和服务器之间扮演着路由器等角色。所以当应用程序连接到<code>RabbitMQ</code> 时，它就必须做个决定：我是在发送还是接收呢？或者从<code>AMQP</code>的角度思考，我是一个生产者还是一个消费者呢？</p><p>生产者(producer)创建消息，然后发布(发送)到代理服务器(<code>RabbitMQ</code> ).</p></blockquote><h4 id="什么是消息"><a href="#什么是消息" class="headerlink" title="什么是消息"></a>什么是消息</h4><blockquote><p>消息包含两部分：有效荷载（<code>payload</code>）和标签（<code>label</code>）</p><p>有效荷载就是你想要传输的数据。它可以是任何内容。<br>标签表述了有效荷载，并且<code>RabbitMQ</code> 用它来决定谁将获得消息的拷贝<br>首先连接到Rabbit ，才能消费或者发布消息。你在应用程序和Rabbit 代理服务器之间创建一条<code>TCP</code>连接。一旦<code>TCP</code>连接打开（你通过了认证），应用程序就可以创建一条<code>AMQP</code>信道。</p></blockquote><h4 id="什么是信道"><a href="#什么是信道" class="headerlink" title="什么是信道"></a>什么是信道</h4><blockquote><p>信道是建立在“真实的”<code>TCP</code>连接内的虚拟连接。<br><code>AMQP</code>命令都是通过信道发送出去的。每条信道都会指派一个唯一的ID（<code>AMQP</code>库会帮你记住ID的）不论是发布消息，订阅队列或是接收消息，这些动作都是通过信道完成的。</p><p>线程启动后，会在现成的连接上创建一条信道，也就获得了连接到Rabbit 上的私密通信路径，而不会给操作系统的<code>TCP</code>造成额外的负担。<br>在一条<code>TCP</code>连接上创建多少条信道是没有限制的。</p></blockquote><h3 id="AMQP"><a href="#AMQP" class="headerlink" title="AMQP"></a>AMQP</h3><blockquote><p><code>TCP</code>连接就像电缆，而<code>AMQP</code>信道就像一条条独立光纤束。</p><p><code>AMQP</code>消息路由必须有三部分：交换器、队列和绑定。<br>生产者把消息发布到交换器上；消息最终达到队列，并被消费者接收；绑定决定了消息如何从路由器路由到特定的队列。</p></blockquote><h4 id="AMQP-messaging-中的基本概念"><a href="#AMQP-messaging-中的基本概念" class="headerlink" title="AMQP messaging 中的基本概念"></a>AMQP messaging 中的基本概念</h4><p><img src="/2017/09/26/理解消息通信之RabbitMQ/amqp_msg.png" alt=""></p><blockquote><p>Broker:    接收和分发消息的应用，RabbitMQ Server就是Message Broker。</p><p>Virtual host:    出于多租户和安全因素设计的，把AMQP的基本组件划分到一个虚拟的分组中，类似于网络中的namespace概念。当多个不同的用户使用同一个RabbitMQ server提供的服务时，可以划分出多个vhost，每个用户在自己的vhost创建exchange／queue等。</p><p>Connection: publisher／consumer和broker之间的TCP连接。断开连接的操作只会在client端进行，Broker不会断开连接，除非出现网络故障或broker服务出现问题。</p><p>Channel: 如果每一次访问RabbitMQ都建立一个Connection，在消息量大的时候建立TCP Connection的开销将是巨大的，效率也较低。Channel是在connection内部建立的逻辑连接，如果应用程序支持多线程，通常每个thread创建单独的channel进行通讯，AMQP method包含了channel id帮助客户端和message broker识别channel，所以channel之间是完全隔离的。Channel作为轻量级的Connection极大减少了操作系统建立TCP connection的开销。</p><p>Exchange: message到达broker的第一站，根据分发规则，匹配查询表中的routing key，分发消息到queue中去。常用的类型有：direct (point-to-point), topic (publish-subscribe) and fanout (multicast)。</p><p>Queue:    消息最终被送到这里等待consumer取走。一个message可以被同时拷贝到多个queue中。</p><p>Binding: exchange和queue之间的虚拟连接，binding中可以包含routing key。Binding信息被保存到exchange中的查询表中，用于message的分发依据。</p></blockquote><h4 id="典型的“生产／消费”消息模型"><a href="#典型的“生产／消费”消息模型" class="headerlink" title="典型的“生产／消费”消息模型"></a>典型的“生产／消费”消息模型</h4><p><img src="/2017/09/26/理解消息通信之RabbitMQ/prod_consume.png" alt=""></p><blockquote><p>生产者发送消息到broker server（RabbitMQ）。在Broker内部，用户创建Exchange／Queue，通过Binding规则将两者联系在一起。Exchange分发消息，根据类型／binding的不同分发策略有区别。消息最后来到Queue中，等待消费者取走。</p></blockquote><h4 id="消息如何达到队列"><a href="#消息如何达到队列" class="headerlink" title="消息如何达到队列"></a>消息如何达到队列</h4><blockquote><ul><li>当你想要将消息投递到队列时，你通过把消息发送给交换器来完成。然后根据确定的规则，RabbitMQ 将会决定消息该投递到哪个队列。这些规则被称为路由键（routing key）。</li><li><p>队列通过路由键绑定到交换器。当你把消息发送到代理服务器时，消息将拥有一个路由键（即便时空的）RabbitMQ 也会将其和绑定使用的路由键进行匹配。如果匹配，那么消息将会投递到该队列，如果路由的消息不匹配任何绑定模式的话，消息将进入“黑洞”。</p></li><li><p>服务器会根据路由键将消息从交换器路由到队列，但它是如何处理投递到多个队列的情况的呢？<br>  协议中定义的四种类型交换机：<code>direct</code>、<code>fanout</code>、<code>topic</code>、headers。</p></li></ul></blockquote><h4 id="Exchange类型"><a href="#Exchange类型" class="headerlink" title="Exchange类型"></a>Exchange类型</h4><p>Exchange有多种类型，最常用的是Direct／Fanout／Topic三种类型。</p><ul><li>Direct</li></ul><p><img src="/2017/09/26/理解消息通信之RabbitMQ/direct.png" alt=""></p><blockquote><p>Message中的“routing key”如果和Binding中的“binding key”一致， Direct exchange则将message发到对应的queue中。</p></blockquote><ul><li>Fanout</li></ul><p><img src="/2017/09/26/理解消息通信之RabbitMQ/fanout.png" alt=""></p><blockquote><p>每个发到Fanout类型Exchange的message都会分到所有绑定的queue上去。</p></blockquote><ul><li>Topic</li></ul><p><img src="/2017/09/26/理解消息通信之RabbitMQ/topic.png" alt=""></p><blockquote><p>根据routing key，及通配规则，Topic exchange将分发到目标queue中。</p><p>Routing key中可以包含两种通配符，类似于正则表达式：</p><p>“#”通配任何零个或多个word</p><p>“*”通配任何单个word </p></blockquote><h4 id="消费者通过一下两种方式从特定的队列中接收消息"><a href="#消费者通过一下两种方式从特定的队列中接收消息" class="headerlink" title="消费者通过一下两种方式从特定的队列中接收消息"></a>消费者通过一下两种方式从特定的队列中接收消息</h4><blockquote><ul><li><p>通过<code>AMQP</code>的<code>basic.consume</code>命令订阅。这样做会将信道设置为接收模式，直到取消队列的订阅为止。订阅了消息后，消费者在消费（或者拒绝）最近接收的那条消息后，就能从队列中（可用的）自动接收下一条消息。</p></li><li><p>某些时候，你只想从队列获得单条消息而不是持续订阅。向队列请求单条消息是通过<code>AMQP</code>的<code>basic.get</code>命令实现的。如果要获得更多的消息，需要再次发送<code>basic.get</code>命令。</p></li></ul></blockquote><p>消费者理应始终使用<code>basic.consume</code>来实现高吞吐量。</p><ul><li><font color="blue">如果至少有一个消费者订阅了队列的话，消息会立即发送给这些订阅的消费者。</font></li><li><font color="blue">如果消息到达了无人订阅的队列的话，消息会在队列中等待，一旦有消费者订阅到该队列，那么队列上的消息就会发送给消费者。</font></li><li><p>如果有多个消费者订阅到同一队列上时，消息如何分发：</p>  <font color="blue">当Rabbit队列拥有多个消费者时，队列收到的消息将以循环的方式发送给消费者。每条消息只会发送给一个订阅的消费者。</font></li></ul><p>假设有seed_bin队列，消费者 A 和消费者 B订阅到seed_bin队列。当消息达到seed_bin队列时，消息投递方式如下：</p><blockquote><p>1、消息message_a 达到 seed_bin 队列</p><p>2、RabbitMQ 把消息message_a 发送给A</p><p>3、A确认接收到了消息message_a</p><p>4、RabbitMQ 把消息message_a从seed_bin中删除</p><p>5、消息message_b达到seed_bin队列</p><p>6、RabbitMQ 把消息messages_b发送给B</p><p>7、B确认接收到了消息message_b</p><p>8、RabbitMQ 把消息message_b从seed_bin中删除</p></blockquote><h4 id="ACK-消息确认"><a href="#ACK-消息确认" class="headerlink" title="ACK 消息确认"></a>ACK 消息确认</h4><blockquote><ul><li><p>消费者接收到的每一条消息都必须进行确认。消费者必须通过<code>AMQP</code>的<code>basic.ack</code>命令显式地向<code>RabbitMQ</code> 发送一个确认，或者在订阅到队列的时候将<code>basic.ack</code>参数设置为<code>true</code>。</p></li><li><p>消费者通过确认命令告诉RabbitMQ 它已经正确地接收了消息，同时RabbitMQ 才能安全地把消息从队列中删除。</p></li></ul><ol><li><p>如果消费者收到一条消息，然后确认之前从Rabbit断开连接（或者从队列上取消订阅），RabbitMQ 会认为这条消息没有分发，然后重新分发给下一个订阅的消费者。</p></li><li><p>如果应用程序有bug而忘记确认消息的话，Rabbit将不会给该消费者发送更多消息了。</p></li><li><p>只要消息尚未确认，则有以下两个选择：</p></li></ol><ul><li><p>把消费者从RabbitMQ 服务器断开连接。</p></li><li><p>使用<code>AMQP</code>的<code>basic.reject</code>命令</p><p>A、如果把<code>reject</code>命令的<code>requeue</code>参数设置成<code>true</code>，<code>RabbitMQ</code> 会将消息重新发送给下一个消    费者，</p><p>B、如果设置成<code>false</code>，<code>RabbitMQ</code> 立即会把消息从队列中移除，而不会把它发送给新的消费者。</p></li></ul></blockquote><h3 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h3><h4 id="创建队列："><a href="#创建队列：" class="headerlink" title="创建队列："></a>创建队列：</h4><p>消费者和生产者都能使用<code>AMQP</code>的<code>queue.declare</code>命令来创建队列。但是如果消费者在同一条信道上订阅了另一个队列的话，就无法再声明队列了。必须先取消订阅，将信道设置为“传输”模式。</p><p>实用参数：</p><blockquote><p><code>exclusive</code> 如果设置为<code>true</code>，队列将变成私有的，此时只有你的应用程序才能够消费队列消息。</p><p><code>auto-delete</code> 当最后一个消费者取消订阅时，队列会自动移除。</p></blockquote><h4 id="检测队列是否存在："><a href="#检测队列是否存在：" class="headerlink" title="检测队列是否存在："></a>检测队列是否存在：</h4><p>将<code>queue.declare</code>的<code>passive</code>选项为<code>true</code></p><blockquote><ul><li>如果队列存在，那么<code>queue.declare</code>命令会成功返回</li><li>如果队列不存在，<code>queue.declare</code>命令不会创建队列而会返回一个错误。</li></ul></blockquote><h4 id="队列是AMQP消息通信的基础模块："><a href="#队列是AMQP消息通信的基础模块：" class="headerlink" title="队列是AMQP消息通信的基础模块："></a>队列是AMQP消息通信的基础模块：</h4><blockquote><ul><li><p>为消息提供了处所，消息在此等待消费</p></li><li><p>对负载均衡来说，队列是绝佳方案，只需附加一堆消费者，并让RabbitMQ 以循环的方式均匀的分配发来的消息。</p></li><li><p>队列是Rabbit中消息的终点（除非消息进入了“黑洞”）</p></li></ul></blockquote><p>服务器必须实现<code>direct</code>类型交换器，包含一个空白字符串名称的默认交换器。当声明一个队列时，它会自动绑定到默认交换器，并以队列名称做为路由键。</p><h3 id="多租户模式：虚拟主机和隔离"><a href="#多租户模式：虚拟主机和隔离" class="headerlink" title="多租户模式：虚拟主机和隔离"></a>多租户模式：虚拟主机和隔离</h3><blockquote><ul><li><p>每一个<code>RabbitMQ</code> 服务器都能创建虚拟消息服务器，我们称之为虚拟主机（<code>vhost</code>）.</p></li><li><p><code>vhost</code>之于<code>Rabbit</code>就像虚拟机之于物理服务器一样。</p></li><li><p>当在<code>RabbitMQ</code> 集群上创建<code>vhost</code>时，整个集群上都会创建该<code>vhost</code>。</p></li></ul></blockquote><h3 id="消息持久化"><a href="#消息持久化" class="headerlink" title="消息持久化"></a>消息持久化</h3><p>重启<code>RabbitMQ</code> 服务器后，那些队列和交换器就都消失了。原因在于每个队列和交换器的<code>durable</code>属性。</p><blockquote><ul><li><p>该属性默认情况为<code>false</code>，它决定了<code>RabbitMQ</code> 是否需要在崩溃或者重启之后重新创建队列或者交换器。</p></li><li><p>设置为<code>true</code>，就不需要在服务器断电后重新创建队列和交换器了。</p></li></ul></blockquote><font color="blue">能从AMQP服务器崩溃中恢复的消息，我们称之为持久化消息。</font><p>在消息发布前，通过把它的“投递模式”（<code>delivery mode</code>）选项设置为 <code>2</code>来把消息标记成持久化。</p><p>到目前为止，消息还只是被表示为持久化的，但是它还必须被发布到持久化的交换器中并到达持久化的队列中才行。</p><h4 id="消息要从Rabbit崩溃中恢复"><a href="#消息要从Rabbit崩溃中恢复" class="headerlink" title="消息要从Rabbit崩溃中恢复"></a>消息要从Rabbit崩溃中恢复</h4><blockquote><ul><li>把它的投递模式选项设置为<code>2</code>（持久）</li><li>发送到持久化的交换器</li><li>到达持久化队列</li></ul></blockquote><p><code>RabbitMQ</code> 确保持久性消息能从服务器重启中恢复的方式是，将它们写入磁盘上的一个持久化日志文件。当发布一条持久性消息到持久交换器上时，Rabbit消息会在消息提交到日志文件后才发送响应。</p><font color="red">注意：</font><blockquote><ul><li><p>之后这条消息如果路由到了非持久队列的话，它会自动从持久性日志中移除，并且无法从服务器重启中恢复。</p></li><li><p>一旦从持久化队列中消费了一条持久性消息到话（并且确认了它），<code>RabbitMQ</code> 会在持久化日志中把这条消息标记为等待垃圾收集。</p></li></ul></blockquote><p>权衡取舍，什么情况下应该使用持久化消息通信：</p><blockquote><ul><li>分析并测试性能需求</li><li>是否需要单台Rabbit服务器每秒处理10 0000 条消息</li></ul></blockquote><h4 id="发送方确认模式"><a href="#发送方确认模式" class="headerlink" title="发送方确认模式"></a>发送方确认模式</h4><p>需要告诉<code>Rabbit</code>将信道设置成<code>confirm</code>模式，而且只能通过重新创建信道来关闭该设置。</p><blockquote><ul><li><p>一旦信道进入<code>confirm</code>模式，所有在信道上发布的消息都会被指派一个唯一的ID号（从 1 开始）。</p></li><li><p>一旦消息被投递给所有匹配的队列后，信道会发送一个发送方确认模式给生产者应用程序（包含消息的唯一ID）这使得生产者知晓消息已经安全到达目的队列了。</p></li><li><p>如果消息和队列是可持久化的，那么确认消息只会在队列将消息写入磁盘后才会发出。</p></li></ul></blockquote><p>发送方确认模式最大的好处是它们是异步 的。</p><font color="orange">于 《RabbitMQ实战》抄录</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;消费者和生产者&quot;&gt;&lt;a href=&quot;#消费者和生产者&quot; class=&quot;headerlink&quot; title=&quot;消费者和生产者&quot;&gt;&lt;/a&gt;消费者和生产者&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;RabbitMQ&lt;/code&gt; 在应用程序和服务器之间扮演着路
      
    
    </summary>
    
      <category term="middleware" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/middleware/"/>
    
      <category term="RabbitMQ" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/middleware/RabbitMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>docker私有仓库之Nexus3</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/25/docker%E7%A7%81%E6%9C%89%E4%BB%93%E5%BA%93%E4%B9%8BNexus3/"/>
    <id>http://博客说写.我爱你/2017/09/25/docker私有仓库之Nexus3/</id>
    <published>2017-09-25T13:20:30.000Z</published>
    <updated>2017-09-30T03:22:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="获取Nexus的Docker镜像"><a href="#获取Nexus的Docker镜像" class="headerlink" title="获取Nexus的Docker镜像"></a>获取Nexus的Docker镜像</h3><p><a href="https://store.docker.com/community/images/sonatype/nexus3" target="_blank" rel="external"><font color="red">Docker hub -nexus</font></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker pull sonatype/nexus3</div></pre></td></tr></table></figure><h3 id="容器运行Nexus"><a href="#容器运行Nexus" class="headerlink" title="容器运行Nexus"></a>容器运行Nexus</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /data/nexus-data &amp;&amp; chown -R 200 /data/nexus-data</div><div class="line">$ docker run -d -p 8081-8100:8081-8100 --name nexus --restart=always -v /data/nexus-data:/nexus-data sonatype/nexus3</div></pre></td></tr></table></figure><h4 id="创建Docker私有仓库"><a href="#创建Docker私有仓库" class="headerlink" title="创建Docker私有仓库"></a>创建Docker私有仓库</h4><ul><li>默认账户 <code>admin</code> 密码 <code>admin123</code>，登录如下</li></ul><p><img src="/2017/09/25/docker私有仓库之Nexus3/nexus_index.jpg" alt=""></p><ul><li>在设置 <code>Repositories</code> 选项卡中中选择 <code>Create repository</code></li></ul><p><img src="/2017/09/25/docker私有仓库之Nexus3/nexus_docker.jpg" alt=""></p><ul><li>选择hosted</li></ul><p><img src="/2017/09/25/docker私有仓库之Nexus3/docker_type.jpg" alt=""></p><p><code>hosted</code>: 本地存储，即同 docker 官方仓库一样提供本地私服功能</p><p><code>proxy</code>: 提供代理其他仓库的类型，如 docker 中央仓库</p><p><code>group</code>: 组类型，实质作用是组合多个仓库为一个地址</p><ul><li>选择 hosted 类型仓库，然后输入一个仓库名，并勾选 HTTP 选项，端口任意即可</li></ul><p><img src="/2017/09/25/docker私有仓库之Nexus3/docker_cfg.png" alt=""></p><h4 id="修改Docker参数"><a href="#修改Docker参数" class="headerlink" title="修改Docker参数"></a>修改Docker参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 增加非安全仓库</div><div class="line">vim /usr/lib/systemd/system/docker.service</div><div class="line"># 在 ExecStart 后面增加(这里改了 host，上面端口用的 8082)</div><div class="line">--insecure-registry registry.yourcompany.com:8082</div><div class="line"># 重启 docker</div><div class="line">systemctl daemon-reload</div><div class="line">systemctl restart docker</div></pre></td></tr></table></figure><h4 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/hosts</div><div class="line"># 修改／追加 你主机IP 的 hostname</div><div class="line">$ 192.168.X.X registry.yourcompany.com</div></pre></td></tr></table></figure><h3 id="测试私服"><a href="#测试私服" class="headerlink" title="测试私服"></a>测试私服</h3><ul><li>登录私服仓库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ docker login registry.yourcompany.com:8082</div></pre></td></tr></table></figure><ul><li>测试 push 和 pull 镜像</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">docker tag sunbjx/alpine registry.com:8082/alpine</div><div class="line">➜  ~ docker push registry.com:8082/alpine</div><div class="line">The push refers to a repository [registry.com:8082/alpine]</div><div class="line">754684812d65: Pushed</div><div class="line">60ab55d3379d: Pushed</div><div class="line">latest: digest: sha256:28f397aca53eb3e8ea1627f4af9c262fca7db17f0c6db492b53adc7bca7d0f91 size: 739</div><div class="line">➜  ~ docker rmi registry.com:8082/alpine</div><div class="line">Untagged: registry.com:8082/alpine:latest</div><div class="line">Untagged: registry.com:8082/alpine@sha256:28f397aca53eb3e8ea1627f4af9c262fca7db17f0c6db492b53adc7bca7d0f91</div><div class="line">➜  ~ docker rmi sunbjx/alpine</div><div class="line">Untagged: sunbjx/alpine:latest</div><div class="line">Untagged: sunbjx/alpine@sha256:28f397aca53eb3e8ea1627f4af9c262fca7db17f0c6db492b53adc7bca7d0f91</div><div class="line">Deleted: sha256:090c790ee6f28f495d92d5be43641573b0d1b5502b35f7662d88cdbf8d548afd</div><div class="line">Deleted: sha256:378e2b887fcdffcbd113a7cf6f97e9f8a58851b0a205b31a93acdb887912850d</div><div class="line">➜  ~ docker pull registry.com:8082/alpine</div><div class="line">Using default tag: latest</div><div class="line">latest: Pulling from alpine</div><div class="line"></div><div class="line">0a8490d0dfd3: Already exists</div><div class="line">8fb018fb4173: Pull complete</div><div class="line">Digest: sha256:28f397aca53eb3e8ea1627f4af9c262fca7db17f0c6db492b53adc7bca7d0f91</div><div class="line">Status: Downloaded newer image for registry.com:8082/alpine:latest</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;获取Nexus的Docker镜像&quot;&gt;&lt;a href=&quot;#获取Nexus的Docker镜像&quot; class=&quot;headerlink&quot; title=&quot;获取Nexus的Docker镜像&quot;&gt;&lt;/a&gt;获取Nexus的Docker镜像&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https
      
    
    </summary>
    
      <category term="devops" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/"/>
    
      <category term="docker" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/docker/"/>
    
    
  </entry>
  
  <entry>
    <title>CentOS7源码安装mysql5.6(社区版)</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/25/CentOS7%E6%BA%90%E7%A0%81%E5%AE%89%E8%A3%85mysql5-6-%E7%A4%BE%E5%8C%BA%E7%89%88/"/>
    <id>http://博客说写.我爱你/2017/09/25/CentOS7源码安装mysql5-6-社区版/</id>
    <published>2017-09-25T03:02:03.000Z</published>
    <updated>2017-09-25T13:12:46.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="确认安装版本"><a href="#确认安装版本" class="headerlink" title="确认安装版本"></a>确认安装版本</h3><p>mysql分为开发版本和稳定版本（GA），开发版本拥有最新的特性，但是并不稳定，也没有完全经过测试，可能存在严重的bug，而稳定版本是经过了长时间的测试，消除了具有已知的bug，其稳定性和安全性都得到一定的保障。  </p><p>对于一个mysql的版本号如：mysql-5.6.1-m1，这个版本号意味着什么呢？  </p><ul><li>对于5.6.1的解释：第一个数字5代表了文件格式，第二个数字6代表了发行级别，第三个数字1代表了版本号。更新幅度较小时，最后的数字会增加，出现了重大特性更新时，第二个数字会增加，文件格式改变时，第一个数字会增加   </li><li>对于m1的解释：这是用来表明这个mysql版本的稳定性级别的，如果没有这个后缀，那么这个版本就是一个稳定版（GA）；如果这个后缀是mN（例如m1，m2）格式，表明了这个版本加入了一些经过彻底测试的新特性，可以认为这是一个试生产的模具；如果这个后缀是rc，表明了这是一个候选版本，已经修改了已知的重要bug，但是没有经过足够长时间的使用来确认所有的bug已经被修复。  </li></ul><p>一旦选择了版本号，就要选择使用哪个发行版，你可以使用二进制发行版如RPM包或Zip压缩包等，但是如果你要实现如下的功能，就要选择源码安装（本文正是选择源码安装的方式）：  </p><ul><li>把mysq安装到指定位置   </li><li>使用mysql的一些特性（标准的二进制版本中并没有这些特性）如：TCP封包支持，调试mysql   </li><li>二进制版本中默认支持所有的字符集，但你可以在编译安装源码时指定字符集，从而使得安装的mysql更小</li></ul><h3 id="卸载原有MySQL或者Mariadb"><a href="#卸载原有MySQL或者Mariadb" class="headerlink" title="卸载原有MySQL或者Mariadb"></a>卸载原有MySQL或者Mariadb</h3><p>CentOs7版本默认情况下安装了mariadb-libs，必须先卸载才可以继续安装MySql</p><h4 id="查找以前是否安装mariadb-libs"><a href="#查找以前是否安装mariadb-libs" class="headerlink" title="查找以前是否安装mariadb-libs"></a>查找以前是否安装mariadb-libs</h4><p>如：<code>mariadb-libs-5.5.35-3.el7.x86_64</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa | grep -i mariadb-libs</div></pre></td></tr></table></figure><h4 id="卸载已经安装的mariadb-libs"><a href="#卸载已经安装的mariadb-libs" class="headerlink" title="卸载已经安装的mariadb-libs"></a>卸载已经安装的mariadb-libs</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum remove mariadb-libs-5.5.35-3.el7.x86_64</div></pre></td></tr></table></figure><h4 id="查找以前是否安装MySQL"><a href="#查找以前是否安装MySQL" class="headerlink" title="查找以前是否安装MySQL"></a>查找以前是否安装MySQL</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rpm -qa | grep -i mysql</div></pre></td></tr></table></figure><ul><li>如果显示有数据 说明已经安装了 MySQL 程序 </li><li>停止mysql服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ service mysql stop</div></pre></td></tr></table></figure><h4 id="删除之前安装的mysql"><a href="#删除之前安装的mysql" class="headerlink" title="删除之前安装的mysql"></a>删除之前安装的mysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ rpm -ve  文件名称   例如：MySQL-server-5.6.24-1.linux_glibc2.5.x86_64</div><div class="line">$ rpm -ve  文件名称   例如：MySQL-client-5.6.24-1.linux_glibc2.5.x86_64</div></pre></td></tr></table></figure><h4 id="查找之前老版本mysql的目录、并且删除老版本mysql的文件和库"><a href="#查找之前老版本mysql的目录、并且删除老版本mysql的文件和库" class="headerlink" title="查找之前老版本mysql的目录、并且删除老版本mysql的文件和库"></a>查找之前老版本mysql的目录、并且删除老版本mysql的文件和库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find / -name mysql</div></pre></td></tr></table></figure><p>如：</p><p>/var/lib/mysql  </p><p>/usr/lib64/mysql  </p><p>/usr/local/mysql  </p><p>/usr/local/mysql/data/mysql</p><ul><li>删除对应的目录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ rm -rf /var/lib/mysql  </div><div class="line">$ rm -rf /usr/lib64/mysql  </div><div class="line">$ rm -rf /usr/local/mysql</div></pre></td></tr></table></figure><ul><li>删除配置文档</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm -rf /etc/my.cnf</div></pre></td></tr></table></figure><h3 id="下载MySQL"><a href="#下载MySQL" class="headerlink" title="下载MySQL"></a>下载MySQL</h3><p>下载完后需要检查文件的MD5，以确认是否从官网下载的原版本（以防被人篡改过该软件）</p><p>我选择如下：<a href="https://dev.mysql.com/downloads/mysql/5.6.html#downloads" target="_blank" rel="external"><font color="red">官网地址</font></a></p><p><img src="/2017/09/25/CentOS7源码安装mysql5-6-社区版/download_mysql.png" alt=""></p><h3 id="编译和安装MySQL"><a href="#编译和安装MySQL" class="headerlink" title="编译和安装MySQL"></a>编译和安装MySQL</h3><h4 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ yum -y install make bison-devel ncures-devel libaio</div><div class="line">$ yum -y install libaio libaio-devel</div><div class="line">$ yum -y install perl-Data-Dumper</div><div class="line">$ yum -y install net-tools</div><div class="line">$ yum -i install bison gcc-c++ cmake ncurses</div></pre></td></tr></table></figure><p>解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar -zxvf mysql-5.6.32.tar.gz</div></pre></td></tr></table></figure><h4 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cmake \-DCMAKE_INSTALL_PREFIX=/usr/local/mysql56 -DMYSQL_DATADIR=/usr/local/mysql/data -DSYSCONFDIR=/etc/my.cnf  -DWITH_MYISAM_STORAGE_ENGINE=1 -DWITH_INNOBASE_STORAGE_ENGINE=1 -DWITH_MEMORY_STORAGE_ENGINE=1 -DWITH_READLINE=1 -DMYSQL_UNIX_ADDR=/tmp/mysqld.sock -DMYSQL_TCP_PORT=3306 -DENABLED_LOCAL_INFILE=1 -DWITH_PARTITION_STORAGE_ENGINE=1 -DEXTRA_CHARSETS=all -DDEFAULT_CHARSET=utf8 -DDEFAULT_COLLATION=utf8_general_ci</div><div class="line"></div><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># -DCMAKE_INSTALL_PREFIX=/usr/local/mysql56  \    #安装路径  </div><div class="line">  </div><div class="line"># -DMYSQL_DATADIR=/usr/local/mysql/data      \    #数据文件存放位置  </div><div class="line">  </div><div class="line"># -DSYSCONFDIR=/etc                         \    #my.cnf路径  </div><div class="line">  </div><div class="line"># -DWITH_MYISAM_STORAGE_ENGINE=1            \    #支持MyIASM引擎  </div><div class="line">  </div><div class="line"># -DWITH_INNOBASE_STORAGE_ENGINE=1          \    #支持InnoDB引擎  </div><div class="line">  </div><div class="line"># -DWITH_MEMORY_STORAGE_ENGINE=1            \    #支持Memory引擎  </div><div class="line">  </div><div class="line"># -DWITH_READLINE=1                         \    #快捷键功能(我没用过)  </div><div class="line">  </div><div class="line"># -DMYSQL_UNIX_ADDR=/tmp/mysqld.sock        \    #连接数据库socket路径  </div><div class="line">  </div><div class="line"># -DMYSQL_TCP_PORT=3306                     \    #端口  </div><div class="line">    </div><div class="line"># -DENABLED_LOCAL_INFILE=1                  \    #允许从本地导入数据  </div><div class="line">  </div><div class="line"># -DWITH_PARTITION_STORAGE_ENGINE=1         \    #安装支持数据库分区  </div><div class="line">  </div><div class="line"># -DEXTRA_CHARSETS=all                      \    #安装所有的字符集  </div><div class="line">  </div><div class="line"># -DDEFAULT_CHARSET=utf8                    \    #默认字符  </div><div class="line">  </div><div class="line"># -DDEFAULT_COLLATION=utf8_general_ci</div></pre></td></tr></table></figure><h4 id="配置MySQL"><a href="#配置MySQL" class="headerlink" title="配置MySQL"></a>配置MySQL</h4><ul><li>检查系统是否已经有mysql用户，如果没有则创建</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/passwd | grep mysql</div><div class="line">$ cat /etc/group | grep mysql</div></pre></td></tr></table></figure><ul><li>创建mysql用户（但是不能使用mysql账号登陆系统</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ groupadd mysql</div><div class="line">$ useradd -g -s mysql mysql</div></pre></td></tr></table></figure><ul><li>修改权限</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ chown -R mysql:mysql /usr/local/mysql</div><div class="line">$ cd /usr/local/mysql</div><div class="line">$ chown -R mysql:mysql .</div><div class="line">$ scripts/mysql_install_db --user=mysql</div><div class="line"># 将权限设置给root用户，并设置给mysql组， 取消其他用户的读写执行权限，</div><div class="line"># 仅留给mysql &quot;rx&quot;读执行权限，其他用户无任何权限</div><div class="line">$ chown -R root:mysql .</div><div class="line">$ chown -R mysql:mysql ./data</div><div class="line">$ chmod -R ug+rwx .</div></pre></td></tr></table></figure><ul><li>将mysql的配置文件拷贝到/etc</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cp support-files/my-default.cnf  /etc/my.cnf</div><div class="line"># 注意：5.6 之前如下</div><div class="line">$ cp support-files/my-medium.cnf /etc/my.cnf</div></pre></td></tr></table></figure><ul><li>修改my.cnf配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim /etc/my.cnf</div></pre></td></tr></table></figure><p><font color="red"><code>[mysqld]</code></font> 下面添加：  </p><p> user=mysql<br> datadir=/data/mysql<br> default-storage-engine=MyISAM</p><ul><li>启动mysql</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 将mysql的启动服务添加到系统服务中</div><div class="line">$ cp support-files/mysql.server  /etc/init.d/mysql</div><div class="line">$ service mysql start</div></pre></td></tr></table></figure><ul><li>增加MySQL服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ chkconfig --add mysql</div></pre></td></tr></table></figure><ul><li>修改root用户密码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cd /usr/local/mysql56</div><div class="line">$ ./bin/mysqladmin -u root password</div><div class="line">$ service mysql restart</div></pre></td></tr></table></figure><h3 id="常用基础操作"><a href="#常用基础操作" class="headerlink" title="常用基础操作"></a>常用基础操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ mysql -u root -p root</div><div class="line">-- 查看数据库</div><div class="line">show databases;</div><div class="line">-- 创建用户并允许本地用户通过密码登录</div><div class="line">create user &apos;username&apos;@&apos;localhost&apos; identified by &apos;user-password&apos;;</div><div class="line">-- 创建数据库</div><div class="line">create database schema_name;</div><div class="line">-- 不可授权给其他用户(* 表示该数据库下所有的表名)</div><div class="line">grant all privileges on schema_name.* to &apos;username&apos;@&apos;remote-ip&apos; identified by &apos;remote-user-password&apos; </div><div class="line">-- 可授权给其他用户</div><div class="line">grant all privileges on schema_name.* to &apos;username&apos;@&apos;remote-ip&apos; identified by &apos;remote-user-password&apos; with grant option;</div><div class="line">-- 刷新</div><div class="line">flush privileges;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;确认安装版本&quot;&gt;&lt;a href=&quot;#确认安装版本&quot; class=&quot;headerlink&quot; title=&quot;确认安装版本&quot;&gt;&lt;/a&gt;确认安装版本&lt;/h3&gt;&lt;p&gt;mysql分为开发版本和稳定版本（GA），开发版本拥有最新的特性，但是并不稳定，也没有完全经过测试，可能存在
      
    
    </summary>
    
      <category term="DB" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/DB/"/>
    
      <category term="MySQL" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/DB/MySQL/"/>
    
    
  </entry>
  
  <entry>
    <title>Centos7下RabbitMQ服务安装配置</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/22/Centos7%E4%B8%8BRabbitMQ%E6%9C%8D%E5%8A%A1%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://博客说写.我爱你/2017/09/22/Centos7下RabbitMQ服务安装配置/</id>
    <published>2017-09-22T09:22:22.000Z</published>
    <updated>2017-09-27T10:24:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-Erlang"><a href="#安装-Erlang" class="headerlink" title="安装 Erlang"></a>安装 Erlang</h3><h4 id="下载源码-官网地址"><a href="#下载源码-官网地址" class="headerlink" title="下载源码(官网地址:)"></a>下载源码(<a href="http://www.erlang.org/downloads" title="Erlang" target="_blank" rel="external">官网地址:</a>)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget http://erlang.org/download/otp_src_19.3.tar.gz</div></pre></td></tr></table></figure><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ yum install gcc glibc-devel make ncurses-devel openssl-devel xmlto</div></pre></td></tr></table></figure><h4 id="解压第一步下载的源码"><a href="#解压第一步下载的源码" class="headerlink" title="解压第一步下载的源码"></a>解压第一步下载的源码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf otp_src_19.3.tar.gz</div><div class="line">$ cd opt_src_19.3</div></pre></td></tr></table></figure><h4 id="配置安装路径编译代码"><a href="#配置安装路径编译代码" class="headerlink" title="配置安装路径编译代码"></a>配置安装路径编译代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./configure --prefix=/opt/erlang</div></pre></td></tr></table></figure><h4 id="执行编译结果"><a href="#执行编译结果" class="headerlink" title="执行编译结果"></a>执行编译结果</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ make &amp;&amp; make install</div></pre></td></tr></table></figure><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./opt/erlang/bin/erl</div></pre></td></tr></table></figure><h4 id="设置环境变量vim-etc-profile"><a href="#设置环境变量vim-etc-profile" class="headerlink" title="设置环境变量vim /etc/profile"></a>设置环境变量<code>vim /etc/profile</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#set erlang environment</div><div class="line">export PATH=$PATH:/opt/erlang/bin</div></pre></td></tr></table></figure><h4 id="编译环境变量"><a href="#编译环境变量" class="headerlink" title="编译环境变量"></a>编译环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source /etc/profile</div></pre></td></tr></table></figure><h3 id="安装RabbitMQ"><a href="#安装RabbitMQ" class="headerlink" title="安装RabbitMQ"></a>安装RabbitMQ</h3><h4 id="下载-官网地址"><a href="#下载-官网地址" class="headerlink" title="下载(官网地址:)"></a>下载(<a href="http://www.rabbitmq.com/releases/rabbitmq-server/" title="RabbitMQ" target="_blank" rel="external">官网地址:</a>)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.11/rabbitmq-server-generic-unix-3.6.11.tar.xz</div></pre></td></tr></table></figure><h4 id="解压文件并重命名"><a href="#解压文件并重命名" class="headerlink" title="解压文件并重命名"></a>解压文件并重命名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ xz -d rabbitmq-server-generic-unix-3.6.1.tar.xz</div><div class="line">$ tar -xvf rabbitmq-server-generic-unix-3.6.1.tar -C /opt</div><div class="line">$ cd /opt</div><div class="line">$ mv rabbitmq_server-3.6.11 rabbitmq</div></pre></td></tr></table></figure><h4 id="设置环境变量vim-etc-profile-1"><a href="#设置环境变量vim-etc-profile-1" class="headerlink" title="设置环境变量vim /etc/profile"></a>设置环境变量<code>vim /etc/profile</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#set rabbitmq environment</div><div class="line">export PATH=$PATH:/opt/rabbitmq/sbin</div></pre></td></tr></table></figure><h4 id="编译环境变量-1"><a href="#编译环境变量-1" class="headerlink" title="编译环境变量"></a>编译环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ source /etc/profile</div></pre></td></tr></table></figure><h4 id="创建日志文件"><a href="#创建日志文件" class="headerlink" title="创建日志文件"></a>创建日志文件</h4><p>RabbitMQ使用Mnesia数据库存储服务器信息，比如队列元数据，虚拟主机等.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /var/log/rabbitmq</div><div class="line">$ mkdir -p /var/log/rabbitmq/mnesia/rabbit</div></pre></td></tr></table></figure><h4 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># cd /opt/rabbitmq/sbin</div><div class="line">$ ./rabbitmq-server -detached</div></pre></td></tr></table></figure><h4 id="配置网页插件"><a href="#配置网页插件" class="headerlink" title="配置网页插件"></a>配置网页插件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./rabbitmq-plugins enable rabbitmq_management</div></pre></td></tr></table></figure><h4 id="远程访问配置"><a href="#远程访问配置" class="headerlink" title="远程访问配置"></a>远程访问配置</h4><ul><li><p>添加用户:<code>rabbitmqctl add_user hxb hxb</code></p></li><li><p>添加权限:<code>rabbitmqctl set_permissions -p &quot;/&quot; hxb &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</code></p></li><li><p>修改用户角色:<code>rabbitmqctl set_user_tags hxb administrator</code></p></li></ul><h4 id="RabbitMQ的用户角色分类"><a href="#RabbitMQ的用户角色分类" class="headerlink" title="RabbitMQ的用户角色分类"></a>RabbitMQ的用户角色分类</h4><p>RabbitMQ的用户角色分类：<code>none</code>、<code>management</code>、<code>policymaker</code>、<code>monitoring</code>、<code>administrator</code></p><ul><li><p>角色-none</p><blockquote><p>不能访问 management plugin</p></blockquote></li><li><p>角色-management</p><blockquote><p>用户可以通过AMQP做的任何事外加： </p><p>列出自己可以通过AMQP登入的virtual hosts </p><p>查看自己的virtual hosts中的queues, exchanges 和 bindings </p><p>查看和关闭自己的channels 和 connections </p><p>查看有关自己的virtual hosts的“全局”的统计信息，包含其他用户在这些virtual hosts中的活动。</p></blockquote></li><li><p>角色-policymaker</p><blockquote><p>management可以做的任何事外加： </p><p>查看、创建和删除自己的virtual hosts所属的policies和parameters</p></blockquote></li><li><p>角色-monitoring</p><blockquote><p>management可以做的任何事外加： </p><p>列出所有virtual hosts，包括他们不能登录的virtual hosts </p><p>查看其他用户的connections和channels </p><p>查看节点级别的数据如clustering和memory使用情况 </p><p>查看真正的关于所有virtual hosts的全局的统计信息</p></blockquote></li><li><p>角色-administrator</p><blockquote><p>policymaker和monitoring可以做的任何事外加: </p><p>创建和删除virtual hosts </p><p>查看、创建和删除users </p><p>查看创建和删除permissions </p><p>关闭其他用户的connections</p></blockquote></li></ul><h3 id="RabbitMQ常用命令"><a href="#RabbitMQ常用命令" class="headerlink" title="RabbitMQ常用命令"></a>RabbitMQ常用命令</h3><p><code>add_user  &lt;UserName&gt; &lt;Password&gt;</code></p><p><code>delete_user    &lt;UserName&gt;</code></p><p><code>change_password &lt;UserName&gt; &lt;NewPassword&gt;</code></p><p><code>list_users</code></p><p><code>add_vhost    &lt;VHostPath&gt;</code></p><p><code>delete_vhost &lt;VHostPath&gt;</code></p><p><code>list_vhostsset_permissions  [-p &lt;VHostPath&gt;] &lt;UserName&gt; &lt;Regexp&gt; &lt;Regexp&gt; &lt;Regexp&gt;</code></p><p><code>clear_permissions [-p &lt;VHostPath&gt;] &lt;UserName&gt;</code></p><p><code>list_permissions  [-p &lt;VHostPath&gt;]</code></p><p><code>list_user_permissions &lt;UserName&gt;</code></p><p><code>list_queues    [-p &lt;VHostPath&gt;] [&lt;QueueInfoItem&gt; ...]</code></p><p><code>list_exchanges [-p &lt;VHostPath&gt;] [&lt;ExchangeInfoItem&gt; ...]</code></p><p><code>list_bindings  [-p &lt;VHostPath&gt;]</code></p><p><code>list_connections [&lt;ConnectionInfoItem&gt; ...]</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-Erlang&quot;&gt;&lt;a href=&quot;#安装-Erlang&quot; class=&quot;headerlink&quot; title=&quot;安装 Erlang&quot;&gt;&lt;/a&gt;安装 Erlang&lt;/h3&gt;&lt;h4 id=&quot;下载源码-官网地址&quot;&gt;&lt;a href=&quot;#下载源码-官网地址&quot; class
      
    
    </summary>
    
      <category term="middleware" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/middleware/"/>
    
      <category term="RabbitMQ" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/middleware/RabbitMQ/"/>
    
    
  </entry>
  
  <entry>
    <title>我让自己自由了三年</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/18/%E6%88%91%E8%AE%A9%E8%87%AA%E5%B7%B1%E8%87%AA%E7%94%B1%E4%BA%86%E4%B8%89%E5%B9%B4/"/>
    <id>http://博客说写.我爱你/2017/09/18/我让自己自由了三年/</id>
    <published>2017-09-18T12:08:23.000Z</published>
    <updated>2017-09-18T12:28:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>我让自己自由了三年-迟来的人生规划（未来的3年计划5年规划）</p><p>感觉这一刻才刚开始（毕业后的面试中总会遇到你未来的五年规划或者计划是什么？支支吾吾了下-😅 接着问到你未来三年是什么或者接下来一年是什么？接着😅）</p><p>就这样尴尬了三年（工作上一直在被动工作，学习上几乎没有，最后经历了由恋爱到寂寞与孤独）</p><p>2018-2020年 我的人生第一个三年计划<br>2021-2025年 我的人生第一个五年规划<br>2018-2020年 我要在成都在英孚把我的英语培训起来（至少要养成一个每天学英语的好习惯）；工作上我必须在devops这一块不断的夯实自己 加倍时间去完成（主打java 涉及python go js）；生活里能否找到自己心仪的适合结婚的好女孩😊；在父母的帮助下必须一定得自己去在成都按揭一套心仪的房子；车能不买就不买 买了也是吃灰😂🤦‍♂️<br>2021-2025年 在一个自己喜欢的公司把它当成自己的公司尽我所能看看我能为公司创造多大的效益并且对比一下公司为我的花费（公司地址不局限于国内😄💪）</p><p>这时候自己35岁了必须得有一个幸福的家庭（在此之前能够兼顾到并完成当然更好😂💪）；选择与能够非常非常非常信任的朋友大家一条心的去创业（产品方向能够为社会为人们带来便利与好处）or 能遇到一个理想的好平台达到和自己创业一致的能够高速高质量稳定的驶向远方 让自己对这个世界甚至这茫茫星云中了解的更多探索的更多</p><p>这一切都必须得身体健康⛽️</p><p>大叔阶段能把妹，花甲之年能抱孙子孙女，有生之年能见重孙重孙女</p><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;—程序员也有的幸福</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我让自己自由了三年-迟来的人生规划（未来的3年计划5年规划）&lt;/p&gt;
&lt;p&gt;感觉这一刻才刚开始（毕业后的面试中总会遇到你未来的五年规划或者计划是什么？支支吾吾了下-😅 接着问到你未来三年是什么或者接下来一年是什么？接着😅）&lt;/p&gt;
&lt;p&gt;就这样尴尬了三年（工作上一直在被
      
    
    </summary>
    
      <category term="规划与计划" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/%E8%A7%84%E5%88%92%E4%B8%8E%E8%AE%A1%E5%88%92/"/>
    
      <category term="人生规划" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/%E8%A7%84%E5%88%92%E4%B8%8E%E8%AE%A1%E5%88%92/%E4%BA%BA%E7%94%9F%E8%A7%84%E5%88%92/"/>
    
    
  </entry>
  
  <entry>
    <title>在CentOS7上部署kubernetes1.7 HA 集群(Vagrant)</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/13/%E5%9C%A8CentOS7%E4%B8%8A%E9%83%A8%E7%BD%B2kubernetes1-7-HA-%E9%9B%86%E7%BE%A4-Vagrant/"/>
    <id>http://博客说写.我爱你/2017/09/13/在CentOS7上部署kubernetes1-7-HA-集群-Vagrant/</id>
    <published>2017-09-13T09:43:47.000Z</published>
    <updated>2017-09-27T08:40:57.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用virtualbox-vagrant安装centos7"><a href="#使用virtualbox-vagrant安装centos7" class="headerlink" title="使用virtualbox + vagrant安装centos7"></a><font color="red">使用virtualbox + vagrant安装centos7</font></h3><h4 id="vagrant准本工作"><a href="#vagrant准本工作" class="headerlink" title="vagrant准本工作"></a>vagrant准本工作</h4><p>1、具体安装和使用<code>virtualbox</code> &amp;&amp; <code>vagrant</code>请自行Google</p><p>2、搜索centos7 box:<br><a href="https://app.vagrantup.com/boxes/search?provider=virtualbox" title="Discover Vagrant Boxes" target="_blank" rel="external">https://app.vagrantup.com/boxes/search?provider=virtualbox</a></p><p>3、生成Vagrantfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/Vagrant/k8s-cluster</div><div class="line">cd ~/Vagrant/k8s-cluster</div><div class="line">vagrant init centos/7</div></pre></td></tr></table></figure><h4 id="安装centos7"><a href="#安装centos7" class="headerlink" title="安装centos7"></a>安装centos7</h4><p>1、编辑Vagrantfile</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd ~/Vagrant/k8s-cluster</div><div class="line">cp Vagrantfile ./Vagrantfile_backup</div><div class="line">emacs Vagrantfile</div></pre></td></tr></table></figure><p>Vagrantfile 内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"># coding: utf-8</div><div class="line">Vagrant.configure(&quot;2&quot;) do |config|</div><div class="line"></div><div class="line">    (11..13).each do |i|</div><div class="line">        </div><div class="line">        config.vm.define &quot;k8s-master#&#123;i&#125;&quot; do |node|</div><div class="line"></div><div class="line">        # 设置虚拟机的Box</div><div class="line">        node.vm.box = &quot;centos/7&quot;</div><div class="line"></div><div class="line">        # 设置虚拟机的主机名</div><div class="line">        node.vm.hostname=&quot;master#&#123;i&#125;&quot;</div><div class="line"></div><div class="line">        # 设置虚拟机的IP</div><div class="line">        node.vm.network &quot;public_network&quot;, ip: &quot;192.168.7.#&#123;i&#125;&quot;, :bridge=&gt;&apos;en0: Wi-Fi (AirPort)&apos;</div><div class="line">node.vm.boot_timeout = 20</div><div class="line"></div><div class="line">        # 设置主机与虚拟机的共享目录</div><div class="line">        node.vm.synced_folder &quot;/Users/sunbjx/Vagrant/share&quot;, &quot;/home/vagrant/share&quot;</div><div class="line"></div><div class="line">        # VirtaulBox相关配置</div><div class="line">        node.vm.provider &quot;virtualbox&quot; do |v|</div><div class="line"></div><div class="line">            # 设置虚拟机的名称</div><div class="line">            v.name = &quot;k8s-master#&#123;i&#125;&quot;</div><div class="line"></div><div class="line">            # 设置虚拟机的内存大小</div><div class="line">            v.memory = 4096</div><div class="line"></div><div class="line">            # 设置虚拟机的CPU个数</div><div class="line">            v.cpus = 2</div><div class="line">        end</div><div class="line"></div><div class="line">        # 使用shell脚本进行软件安装和配置</div><div class="line">        node.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</div><div class="line">        sudo yum -y update</div><div class="line">            sudo yum -y install net-tools</div><div class="line">            sudo yum -y install vim</div><div class="line">        SHELL</div><div class="line">        end</div><div class="line">    end     </div><div class="line">  </div><div class="line">    (14..15).each do |i|</div><div class="line"></div><div class="line">        config.vm.define &quot;k8s-node#&#123;i&#125;&quot; do |node|</div><div class="line"></div><div class="line">        # 设置虚拟机的Box</div><div class="line">        node.vm.box = &quot;centos/7&quot;</div><div class="line"></div><div class="line">        # 设置虚拟机的主机名</div><div class="line">        node.vm.hostname=&quot;node#&#123;i&#125;&quot;</div><div class="line"></div><div class="line">        # 设置虚拟机的IP</div><div class="line">        node.vm.network &quot;public_network&quot;, ip: &quot;192.168.7.#&#123;i&#125;&quot;, :bridge=&gt;&apos;en0: Wi-Fi (AirPort)&apos;</div><div class="line">node.vm.boot_timeout = 20</div><div class="line"></div><div class="line">        # 设置主机与虚拟机的共享目录</div><div class="line">        node.vm.synced_folder &quot;/Users/sunbjx/Vagrant/share&quot;, &quot;/home/vagrant/share&quot;</div><div class="line"></div><div class="line">        # VirtaulBox相关配置</div><div class="line">        node.vm.provider &quot;virtualbox&quot; do |v|</div><div class="line"></div><div class="line">            # 设置虚拟机的名称</div><div class="line">            v.name = &quot;k8s-node#&#123;i&#125;&quot;</div><div class="line"></div><div class="line">            # 设置虚拟机的内存大小  </div><div class="line">            v.memory = 8192</div><div class="line"></div><div class="line">            # 设置虚拟机的CPU个数</div><div class="line">            v.cpus = 2</div><div class="line">        end</div><div class="line"></div><div class="line">        # 使用shell脚本进行软件安装和配置</div><div class="line">        node.vm.provision &quot;shell&quot;, inline: &lt;&lt;-SHELL</div><div class="line">sudo yum -y update</div><div class="line">            sudo yum -y install net-tools</div><div class="line">            sudo yum -y install vim      </div><div class="line">        SHELL</div><div class="line">        end</div><div class="line">    end</div><div class="line">end</div></pre></td></tr></table></figure><p>2、启动安装centos7</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vagrant up</div></pre></td></tr></table></figure><h3 id="环境说明"><a href="#环境说明" class="headerlink" title="环境说明"></a><font color="red">环境说明</font></h3><p>环境总共 5 台虚拟机，3 个 master，3 个 etcd 节点，2 个 node</p><font color="blue">网络方案这里采用<code>flannel</code>，集群开启 <code>RBAC</code></font><table><thead><tr><th style="text-align:center">IP</th><th style="text-align:center">节点</th></tr></thead><tbody><tr><td style="text-align:center">192.168.7.11</td><td style="text-align:center">master、etcd</td></tr><tr><td style="text-align:center">192.168.7.12</td><td style="text-align:center">master、etcd</td></tr><tr><td style="text-align:center">192.168.7.13</td><td style="text-align:center">master、etcd</td></tr><tr><td style="text-align:center">192.168.7.14</td><td style="text-align:center">node</td></tr><tr><td style="text-align:center">192.168.7.15</td><td style="text-align:center">node</td></tr></tbody></table><h3 id="创建-TLS证书和秘钥"><a href="#创建-TLS证书和秘钥" class="headerlink" title="创建 TLS证书和秘钥"></a><font color="red">创建 TLS证书和秘钥</font></h3><h4 id="证书说明"><a href="#证书说明" class="headerlink" title="证书说明"></a>证书说明</h4><table><thead><tr><th style="text-align:center">证书名称</th><th style="text-align:center">配置文件</th><th style="text-align:center">用途</th></tr></thead><tbody><tr><td style="text-align:center">etcd-root-ca.pem</td><td style="text-align:center">etcd-root-ca-csr.json</td><td style="text-align:center">etcd 根 CA 证书</td></tr><tr><td style="text-align:center">etcd.pem</td><td style="text-align:center">etcd-gencert.json、etcd-csr.json</td><td style="text-align:center">etcd 集群证书</td></tr><tr><td style="text-align:center">k8s-root-ca.pem</td><td style="text-align:center">k8s-root-ca-csr.json</td><td style="text-align:center">k8s 根 CA 证书</td></tr><tr><td style="text-align:center">kube-proxy.pem</td><td style="text-align:center">k8s-gencert.json、kube-proxy-csr.json</td><td style="text-align:center">kube-proxy 使用的证书</td></tr><tr><td style="text-align:center">admin.pem</td><td style="text-align:center">k8s-gencert.json、admin-csr.json</td><td style="text-align:center">kubectl 使用的证书</td></tr><tr><td style="text-align:center">kubernetes.pem</td><td style="text-align:center">k8s-gencert.json、kubernetes-csr.json</td><td style="text-align:center">kube-apiserver 使用的证书</td></tr></tbody></table><h4 id="安装CFSSL-192-168-7-11"><a href="#安装CFSSL-192-168-7-11" class="headerlink" title="安装CFSSL (192.168.7.11)"></a>安装<code>CFSSL</code> (192.168.7.11)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/download</div><div class="line">cd ~/download</div><div class="line"># 下载 go1.8.3</div><div class="line">wget https://golang.org/dl/go1.8.3.linux-amd64.tar.gz</div><div class="line"># 解压压缩包</div><div class="line">tar -C /usr/local -xzf go1.8.3.linux-amd64.tar.gz</div><div class="line"># 添加环境变量</div><div class="line">vim /etc/profile</div><div class="line">export GOROOT=/usr/local/go</div><div class="line">export PATH=$PATH:$GOROOT/bin</div><div class="line">source /etc/profile</div><div class="line"># 使用 go 命令安装 cfssl</div><div class="line">go get -u github.com/cloudflare/cfssl/cmd/...</div></pre></td></tr></table></figure><h4 id="生成etcd证书-192-168-7-11"><a href="#生成etcd证书-192-168-7-11" class="headerlink" title="生成etcd证书 (192.168.7.11)"></a>生成<code>etcd</code>证书 (192.168.7.11)</h4><ul><li>etcd 证书配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir -p ~/document/ssl</div><div class="line">cd ~/document/ssl</div></pre></td></tr></table></figure><p><code>vim etcd-root-ca-csr.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;key&quot;: &#123;</div><div class="line">    &quot;algo&quot;: &quot;rsa&quot;,</div><div class="line">    &quot;size&quot;: 4096</div><div class="line">  &#125;,</div><div class="line">  &quot;names&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;O&quot;: &quot;etcd&quot;,</div><div class="line">      &quot;OU&quot;: &quot;etcd Security&quot;,</div><div class="line">      &quot;L&quot;: &quot;Beijing&quot;,</div><div class="line">      &quot;ST&quot;: &quot;Beijing&quot;,</div><div class="line">      &quot;C&quot;: &quot;CN&quot;</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  &quot;CN&quot;: &quot;etcd-root-ca&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>vim etcd-gencert.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;signing&quot;: &#123;</div><div class="line">    &quot;default&quot;: &#123;</div><div class="line">        &quot;usages&quot;: [</div><div class="line">          &quot;signing&quot;,</div><div class="line">          &quot;key encipherment&quot;,</div><div class="line">          &quot;server auth&quot;,</div><div class="line">          &quot;client auth&quot;</div><div class="line">        ],</div><div class="line">        &quot;expiry&quot;: &quot;87600h&quot;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>vim etcd-csr.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;key&quot;: &#123;</div><div class="line">    &quot;algo&quot;: &quot;rsa&quot;,</div><div class="line">    &quot;size&quot;: 4096</div><div class="line">  &#125;,</div><div class="line">  &quot;names&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;O&quot;: &quot;etcd&quot;,</div><div class="line">      &quot;OU&quot;: &quot;etcd Security&quot;,</div><div class="line">      &quot;L&quot;: &quot;Beijing&quot;,</div><div class="line">      &quot;ST&quot;: &quot;Beijing&quot;,</div><div class="line">      &quot;C&quot;: &quot;CN&quot;</div><div class="line">    &#125;</div><div class="line">  ],</div><div class="line">  &quot;CN&quot;: &quot;etcd&quot;,</div><div class="line">  &quot;hosts&quot;: [</div><div class="line">    &quot;127.0.0.1&quot;,</div><div class="line">    &quot;localhost&quot;,</div><div class="line">    &quot;192.168.1.11&quot;,</div><div class="line">    &quot;192.168.1.12&quot;,</div><div class="line">    &quot;192.168.1.13&quot;,</div><div class="line">    &quot;192.168.1.14&quot;,</div><div class="line">    &quot;192.168.1.15&quot;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><font color="blue">“CN”：Common Name，kube-apiserver 从证书中提取该字段作为请求的用户名 (User Name)；浏览器使用该字段验证网站是否合法；<br><br>“O”：Organization，kube-apiserver 从证书中提取该字段作为请求用户所属的组 (Group)</font><ul><li>生成 etcd 证书</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cfssl gencert --initca=true etcd-root-ca-csr.json | cfssljson --bare etcd-root-ca</div><div class="line">cfssl gencert --ca etcd-root-ca.pem --ca-key etcd-root-ca-key.pem --config etcd-gencert.json etcd-csr.json | cfssljson --bare etcd</div></pre></td></tr></table></figure><p><img src="/images/etcd.png" alt="etcd 证书" title="etcd 证书"></p><h4 id="生成-kubernetes-证书-192-168-7-11"><a href="#生成-kubernetes-证书-192-168-7-11" class="headerlink" title="生成 kubernetes 证书 (192.168.7.11)"></a>生成 kubernetes 证书 (192.168.7.11)</h4><ul><li>kubernetes 证书配置文件</li></ul><p><code>vim k8s-root-ca-csr.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;CN&quot;: &quot;kubernetes&quot;,</div><div class="line">  &quot;key&quot;: &#123;</div><div class="line">    &quot;algo&quot;: &quot;rsa&quot;,</div><div class="line">    &quot;size&quot;: 4096</div><div class="line">  &#125;,</div><div class="line">  &quot;names&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;C&quot;: &quot;CN&quot;,</div><div class="line">      &quot;ST&quot;: &quot;BeiJing&quot;,</div><div class="line">      &quot;L&quot;: &quot;BeiJing&quot;,</div><div class="line">      &quot;O&quot;: &quot;k8s&quot;,</div><div class="line">      &quot;OU&quot;: &quot;System&quot;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>vim k8s-gencert.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;signing&quot;: &#123;</div><div class="line">    &quot;default&quot;: &#123;</div><div class="line">      &quot;expiry&quot;: &quot;87600h&quot;</div><div class="line">    &#125;,</div><div class="line">    &quot;profiles&quot;: &#123;</div><div class="line">      &quot;kubernetes&quot;: &#123;</div><div class="line">        &quot;usages&quot;: [</div><div class="line">            &quot;signing&quot;,</div><div class="line">            &quot;key encipherment&quot;,</div><div class="line">            &quot;server auth&quot;,</div><div class="line">            &quot;client auth&quot;</div><div class="line">        ],</div><div class="line">        &quot;expiry&quot;: &quot;87600h&quot;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>vim kubernetes-csr.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    &quot;CN&quot;: &quot;kubernetes&quot;,</div><div class="line">    &quot;hosts&quot;: [</div><div class="line">        &quot;127.0.0.1&quot;,</div><div class="line">        &quot;10.254.0.1&quot;,</div><div class="line">        &quot;192.168.7.11&quot;,</div><div class="line">        &quot;192.168.7.12&quot;,</div><div class="line">        &quot;192.168.7.13&quot;,</div><div class="line">        &quot;192.168.7.14&quot;,</div><div class="line">        &quot;192.168.7.15&quot;,</div><div class="line">        &quot;localhost&quot;,</div><div class="line">        &quot;kubernetes&quot;,</div><div class="line">        &quot;kubernetes.default&quot;,</div><div class="line">        &quot;kubernetes.default.svc&quot;,</div><div class="line">        &quot;kubernetes.default.svc.cluster&quot;,</div><div class="line">        &quot;kubernetes.default.svc.cluster.local&quot;</div><div class="line">    ],</div><div class="line">    &quot;key&quot;: &#123;</div><div class="line">        &quot;algo&quot;: &quot;rsa&quot;,</div><div class="line">        &quot;size&quot;: 2048</div><div class="line">    &#125;,</div><div class="line">    &quot;names&quot;: [</div><div class="line">        &#123;</div><div class="line">            &quot;C&quot;: &quot;CN&quot;,</div><div class="line">            &quot;ST&quot;: &quot;BeiJing&quot;,</div><div class="line">            &quot;L&quot;: &quot;BeiJing&quot;,</div><div class="line">            &quot;O&quot;: &quot;k8s&quot;,</div><div class="line">            &quot;OU&quot;: &quot;System&quot;</div><div class="line">        &#125;</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>vim kube-proxy-csr.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;CN&quot;: &quot;system:kube-proxy&quot;,</div><div class="line">  &quot;hosts&quot;: [],</div><div class="line">  &quot;key&quot;: &#123;</div><div class="line">    &quot;algo&quot;: &quot;rsa&quot;,</div><div class="line">    &quot;size&quot;: 2048</div><div class="line">  &#125;,</div><div class="line">  &quot;names&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;C&quot;: &quot;CN&quot;,</div><div class="line">      &quot;ST&quot;: &quot;BeiJing&quot;,</div><div class="line">      &quot;L&quot;: &quot;BeiJing&quot;,</div><div class="line">      &quot;O&quot;: &quot;k8s&quot;,</div><div class="line">      &quot;OU&quot;: &quot;System&quot;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><code>vim admin-csr.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;CN&quot;: &quot;admin&quot;,</div><div class="line">  &quot;hosts&quot;: [],</div><div class="line">  &quot;key&quot;: &#123;</div><div class="line">    &quot;algo&quot;: &quot;rsa&quot;,</div><div class="line">    &quot;size&quot;: 2048</div><div class="line">  &#125;,</div><div class="line">  &quot;names&quot;: [</div><div class="line">    &#123;</div><div class="line">      &quot;C&quot;: &quot;CN&quot;,</div><div class="line">      &quot;ST&quot;: &quot;BeiJing&quot;,</div><div class="line">      &quot;L&quot;: &quot;BeiJing&quot;,</div><div class="line">      &quot;O&quot;: &quot;system:masters&quot;,</div><div class="line">      &quot;OU&quot;: &quot;System&quot;</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>生成 kubernetes 证书</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cfssl gencert --initca=true k8s-root-ca-csr.json | cfssljson --bare k8s-root-ca</div><div class="line"></div><div class="line">for targetName in kubernetes admin kube-proxy; do</div><div class="line">    cfssl gencert --ca k8s-root-ca.pem --ca-key k8s-root-ca-key.pem --config k8s-gencert.json --profile kubernetes $targetName-csr.json | cfssljson --bare $targetName</div><div class="line">done</div></pre></td></tr></table></figure><p><img src="/images/kube.png" alt="kubernetes 证书" title="kubernetes 证书"></p><ul><li>分发所需证书到各个节点目录 /etc/kubernetes/ssl 下面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">for IP in `seq 1 5`;do</div><div class="line"> ssh root@192.168.1.1$IP mkdir -p /etc/etcd/ssl</div><div class="line"> sudo scp ~/document/ssl/etcd*.pem root@192.168.1.1$IP:/etc/etcd/ssl</div><div class="line"> ssh root@192.168.1.1$IP chown -R etcd:etcd /etc/etcd/ssl</div><div class="line"> ssh root@192.168.1.1$IP chmod -R 755 /etc/etcd</div><div class="line"> ssh root@192.168.7.1$IP mkdir -p /etc/kubernetes/ssl</div><div class="line"> sudo scp ~/document/ssl/*.pem root@192.168.7.1$IP:/etc/kubernetes/ssl</div><div class="line"> ssh root@192.168.7.1$IP chown -R kube:kube /etc/kubernetes/ssl</div><div class="line">done</div></pre></td></tr></table></figure><h4 id="生成-token-及-kubeconfig-192-168-7-11"><a href="#生成-token-及-kubeconfig-192-168-7-11" class="headerlink" title="生成 token 及 kubeconfig (192.168.7.11)"></a>生成 token 及 kubeconfig (192.168.7.11)</h4><font color="blue">kubelet、kube-proxy 等 Node 机器上的进程与 Master 机器的 kube-apiserver 进程通信时需要认证和授权；<br><br>kubernetes 1.4 开始支持由 kube-apiserver 为客户端生成 TLS 证书的 TLS Bootstrapping 功能，这样就不需要为每个客户端生成证书了；该功能当前仅支持为 kubelet 生成证书</font><ul><li>生成 token</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">cd /etc/kubernetes</div><div class="line">export BOOTSTRAP_TOKEN=$(head -c 16 /dev/urandom | od -An -t x | tr -d &apos; &apos;)</div><div class="line">cat &gt; token.csv &lt;&lt;EOF</div><div class="line">$&#123;BOOTSTRAP_TOKEN&#125;,kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;</div><div class="line">EOF</div></pre></td></tr></table></figure><p><img src="/images/token.png" alt="kubernetes 证书" title="kubernetes 证书"></p><font color="blue">BOOTSTRAP_TOKEN 将被写入到 kube-apiserver 使用的 token.csv 文件和 kubelet 使用的 bootstrap.kubeconfig 文件，如果后续重新生成了 BOOTSTRAP_TOKEN，则需要：<br><br>更新 token.csv 文件，分发到所有机器 (master 和 node）的 /etc/kubernetes/ 目录下，分发到node节点上非必需；<br>重新生成 bootstrap.kubeconfig 文件，分发到所有 node 机器的 /etc/kubernetes/ 目录下；<br>重启 kube-apiserver 和 kubelet 进程；<br>重新 approve kubelet 的 csr 请求</font><p>安装 kubernetes 并将 kube-apiserver,kube-controller-manager,kube-scheduler,kubectl 分发到 master; kubelet,kube-proxy 分发到 node; 同时分发所需证书到各个节点目录 /etc/kubernetes/ssl 下面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">cd ~/download</div><div class="line">wget https://github.com/kubernetes/kubernetes/releases/download/v1.7.4/kubernetes.tar.gz</div><div class="line">tar -zxvf kubernetes.tar.gz</div><div class="line">cd kubernetes</div><div class="line">./cluster/get-kube-binaries.sh</div><div class="line">cd kubernetes/server</div><div class="line">tar -zxvf kubernetes-server-linux-amd64.tar.gz</div><div class="line">cd kubernetes/server/bin</div><div class="line"></div><div class="line">for IP in `seq 1 3`;do</div><div class="line">sudo scp ./&#123;kube-apiserver,kube-controller-manager,kube-scheduler,kubectl&#125; root@192.168.7.1$IP:/usr/local/bin/</div><div class="line">ssh root@192.168.7.1$IP chmod a+x /usr/local/bin/kube*</div><div class="line">done</div><div class="line"></div><div class="line">for IP in `seq 4 5`;do</div><div class="line">    sudo scp ./&#123;kubelet,kube-proxy&#125; root@192.168.7.1$IP:/usr/local/bin</div><div class="line">    ssh root@192.168.7.1$IP chmod a+x /usr/local/bin/kube*</div><div class="line">done</div></pre></td></tr></table></figure><ul><li>创建 kubelet bootstrapping kubeconfig 文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">cd /etc/kubernetes</div><div class="line">export KUBE_APISERVER=&quot;https://192.168.7.11:6443&quot;</div><div class="line"># 设置集群参数</div><div class="line">kubectl config set-cluster kubernetes \</div><div class="line">  --certificate-authority=/etc/kubernetes/ssl/k8s-root-ca.pem \</div><div class="line">  --embed-certs=true \</div><div class="line">  --server=$&#123;KUBE_APISERVER&#125; \</div><div class="line">  --kubeconfig=bootstrap.kubeconfig</div><div class="line"># 设置客户端认证参数</div><div class="line">kubectl config set-credentials kubelet-bootstrap \</div><div class="line">  --token=$&#123;BOOTSTRAP_TOKEN&#125; \</div><div class="line">  --kubeconfig=bootstrap.kubeconfig</div><div class="line"># 设置上下文参数</div><div class="line">kubectl config set-context default \</div><div class="line">  --cluster=kubernetes \</div><div class="line">  --user=kubelet-bootstrap \</div><div class="line">  --kubeconfig=bootstrap.kubeconfig</div><div class="line"># 设置默认上下文</div><div class="line">kubectl config use-context default --kubeconfig=bootstrap.kubeconfig</div></pre></td></tr></table></figure><font color="blue">–embed-certs 为 true 时表示将 certificate-authority 证书写入到生成的 bootstrap.kubeconfig 文件中；<br><br>设置客户端认证参数时没有指定秘钥和证书，后续由 kube-apiserver 自动生成</font><ul><li>创建 kube-proxy kubeconfig 文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"># 设置集群参数</div><div class="line">kubectl config set-cluster kubernetes \</div><div class="line">  --certificate-authority=/etc/kubernetes/ssl/k8s-root-ca.pem \</div><div class="line">  --embed-certs=true \</div><div class="line">  --server=$&#123;KUBE_APISERVER&#125; \</div><div class="line">  --kubeconfig=kube-proxy.kubeconfig</div><div class="line"># 设置客户端认证参数</div><div class="line">kubectl config set-credentials kube-proxy \</div><div class="line">  --client-certificate=/etc/kubernetes/ssl/kube-proxy.pem \</div><div class="line">  --client-key=/etc/kubernetes/ssl/kube-proxy-key.pem \</div><div class="line">  --embed-certs=true \</div><div class="line">  --kubeconfig=kube-proxy.kubeconfig</div><div class="line"># 设置上下文参数</div><div class="line">kubectl config set-context default \</div><div class="line">  --cluster=kubernetes \</div><div class="line">  --user=kube-proxy \</div><div class="line">  --kubeconfig=kube-proxy.kubeconfig</div><div class="line"># 设置默认上下文</div><div class="line">kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig</div></pre></td></tr></table></figure><font color="blue">设置集群参数和客户端认证参数时 –embed-certs 都为 true，这会将 certificate-authority、client-certificate 和 client-key 指向的证书文件内容写入到生成的 kube-proxy.kubeconfig 文件中；<br><br>kube-proxy.pem 证书中 CN 为 system:kube-proxy，kube-apiserver 预定义的 RoleBinding cluster-admin 将User system:kube-proxy 与 Role system:node-proxier 绑定，该 Role 授予了调用 kube-apiserver Proxy 相关 API 的权限</font><ul><li>分发 token、kubeconfig 文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">for IP in `seq 2 5`;do</div><div class="line">    scp *.kubeconfig root@192.168.7.1$IP:/etc/kubernetes</div><div class="line">    scp token.csv root@192.168.7.1$IP:/etc/kubernetes</div><div class="line">done</div></pre></td></tr></table></figure><h3 id="部署-HA-etcd"><a href="#部署-HA-etcd" class="headerlink" title="部署 HA etcd"></a><font color="red">部署 HA etcd</font></h3><h4 id="安装-etcd"><a href="#安装-etcd" class="headerlink" title="安装 etcd"></a>安装 etcd</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo yum -y install etcd</div><div class="line">echo &apos;export ETCDCTL_API=3&apos; &gt;&gt; /etc/profile</div><div class="line">source /etc/profile</div></pre></td></tr></table></figure><h4 id="修改配置-vim-etc-etcd-etc-conf"><a href="#修改配置-vim-etc-etcd-etc-conf" class="headerlink" title="修改配置 vim /etc/etcd/etc.conf"></a>修改配置 <code>vim /etc/etcd/etc.conf</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line"># [member]</div><div class="line">ETCD_NAME=etcd1</div><div class="line">ETCD_DATA_DIR=&quot;/var/lib/etcd/etcd1.etcd&quot;</div><div class="line">ETCD_WAL_DIR=&quot;/var/lib/etcd/wal&quot;</div><div class="line">ETCD_SNAPSHOT_COUNT=&quot;100&quot;</div><div class="line">ETCD_HEARTBEAT_INTERVAL=&quot;100&quot;</div><div class="line">ETCD_ELECTION_TIMEOUT=&quot;1000&quot;</div><div class="line">ETCD_LISTEN_PEER_URLS=&quot;https://192.168.7.11:2380&quot;</div><div class="line">ETCD_LISTEN_CLIENT_URLS=&quot;https://192.168.7.11:2379,http://127.0.0.1:2379&quot;</div><div class="line">ETCD_MAX_SNAPSHOTS=&quot;5&quot;</div><div class="line">ETCD_MAX_WALS=&quot;5&quot;</div><div class="line">#ETCD_CORS=&quot;&quot;</div><div class="line">#</div><div class="line">#[cluster]</div><div class="line">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://192.168.7.11:2380&quot;</div><div class="line"># if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;</div><div class="line">ETCD_INITIAL_CLUSTER=&quot;etcd1=https://192.168.7.11:2380,etcd2=https://192.168.7.12:2380,etcd3=https://192.168.7.13:2380&quot;</div><div class="line">ETCD_INITIAL_CLUSTER_STATE=&quot;new&quot;</div><div class="line">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</div><div class="line">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://192.168.7.11:2379&quot;</div><div class="line">#ETCD_DISCOVERY=&quot;&quot;</div><div class="line">#ETCD_DISCOVERY_SRV=&quot;&quot;</div><div class="line">#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;</div><div class="line">#ETCD_DISCOVERY_PROXY=&quot;&quot;</div><div class="line">#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;</div><div class="line">#ETCD_AUTO_COMPACTION_RETENTION=&quot;0&quot;</div><div class="line">#</div><div class="line">#[proxy]</div><div class="line">#ETCD_PROXY=&quot;off&quot;</div><div class="line">#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;</div><div class="line">#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;</div><div class="line">#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;</div><div class="line">#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;</div><div class="line">#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;</div><div class="line">#</div><div class="line">#[security]</div><div class="line">ETCD_CERT_FILE=&quot;/etc/etcd/ssl/etcd.pem&quot;</div><div class="line">ETCD_KEY_FILE=&quot;/etc/etcd/ssl/etcd-key.pem&quot;</div><div class="line">ETCD_CLIENT_CERT_AUTH=&quot;true&quot;</div><div class="line">ETCD_TRUSTED_CA_FILE=&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</div><div class="line">ETCD_AUTO_TLS=&quot;true&quot;</div><div class="line">ETCD_PEER_CERT_FILE=&quot;/etc/etcd/ssl/etcd.pem&quot;</div><div class="line">ETCD_PEER_KEY_FILE=&quot;/etc/etcd/ssl/etcd-key.pem&quot;</div><div class="line">ETCD_PEER_CLIENT_CERT_AUTH=&quot;true&quot;</div><div class="line">ETCD_PEER_TRUSTED_CA_FILE=&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;</div><div class="line">ETCD_PEER_AUTO_TLS=&quot;true&quot;</div><div class="line">#</div><div class="line">#[logging]</div><div class="line">#ETCD_DEBUG=&quot;false&quot;</div><div class="line"># examples for -log-package-levels etcdserver=WARNING,security=DEBUG</div><div class="line">#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;</div></pre></td></tr></table></figure><h4 id="启动及验证"><a href="#启动及验证" class="headerlink" title="启动及验证"></a>启动及验证</h4><ul><li>配置修改后在每个节点进行启动即可，注意，Etcd 各个节点间必须保证时钟同步，否则会造成启动失败等错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">yum -y install ntp</div><div class="line">systemctl start ntpd</div><div class="line">systemctl enable ntpd</div><div class="line">hwclock --systohc</div><div class="line">systemctl daemon-reload</div><div class="line">systemctl start etcd</div><div class="line">systemctl enable etcd</div></pre></td></tr></table></figure><ul><li>验证 etcd 集群节点状态</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export ETCDCTL_API=3</div><div class="line">etcdctl --cacert=/etc/etcd/ssl/etcd-root-ca.pem --cert=/etc/etcd/ssl/etcd.pem --key=/etc/etcd/ssl/etcd-key.pem --endpoints=https://192.168.7.11:2379,https://192.168.7.12:2379,https://192.168.7.13:2379 endpoint health</div></pre></td></tr></table></figure><h3 id="部署-HA-master"><a href="#部署-HA-master" class="headerlink" title="部署 HA master"></a><font color="red">部署 HA master</font></h3><p>由于 api server 会写入一些日志，所以先创建好相关目录，并做好授权，防止因为权限错误导致 api server 无法启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">for IP in `seq 1 3`;do</div><div class="line">    ssh root@192.168.1.1$IP mkdir /var/log/kube-audit  </div><div class="line">    ssh root@192.168.1.1$IP chown -R kube:kube /var/log/kube-audit</div><div class="line">    ssh root@192.168.1.1$IP chmod -R 755 /var/log/kube-audit</div><div class="line">done</div></pre></td></tr></table></figure><h4 id="创建-kube-apiserver的service配置文件"><a href="#创建-kube-apiserver的service配置文件" class="headerlink" title="创建 kube-apiserver的service配置文件"></a>创建 kube-apiserver的service配置文件</h4><p><code>vim /usr/lib/systemd/system/kube-apiserver.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes API Service</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line">After=network.target</div><div class="line">After=etcd.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/apiserver</div><div class="line">ExecStart=/usr/local/bin/kube-apiserver \</div><div class="line">        $KUBE_LOGTOSTDERR \</div><div class="line">        $KUBE_LOG_LEVEL \</div><div class="line">        $KUBE_ETCD_SERVERS \</div><div class="line">        $KUBE_API_ADDRESS \</div><div class="line">        $KUBE_API_PORT \</div><div class="line">        $KUBELET_PORT \</div><div class="line">        $KUBE_ALLOW_PRIV \</div><div class="line">        $KUBE_SERVICE_ADDRESSES \</div><div class="line">        $KUBE_ADMISSION_CONTROL \</div><div class="line">        $KUBE_API_ARGS</div><div class="line">Restart=on-failure</div><div class="line">Type=notify</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><h4 id="创建-kube-controller-manager的serivce配置文件"><a href="#创建-kube-controller-manager的serivce配置文件" class="headerlink" title="创建 kube-controller-manager的serivce配置文件"></a>创建 kube-controller-manager的serivce配置文件</h4><p><code>vim /usr/lib/systemd/system/kube-controller-manager.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Description=Kubernetes Controller Manager</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/controller-manager</div><div class="line">ExecStart=/usr/local/bin/kube-controller-manager \</div><div class="line">        $KUBE_LOGTOSTDERR \</div><div class="line">        $KUBE_LOG_LEVEL \</div><div class="line">        $KUBE_MASTER \</div><div class="line">        $KUBE_CONTROLLER_MANAGER_ARGS</div><div class="line">Restart=on-failure</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><h4 id="创建-kube-scheduler的serivce配置文件"><a href="#创建-kube-scheduler的serivce配置文件" class="headerlink" title="创建 kube-scheduler的serivce配置文件"></a>创建 kube-scheduler的serivce配置文件</h4><p><code>vim /usr/lib/systemd/system/kube-scheduler.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes Scheduler Plugin</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/scheduler</div><div class="line">ExecStart=/usr/local/bin/kube-scheduler \</div><div class="line">            $KUBE_LOGTOSTDERR \</div><div class="line">            $KUBE_LOG_LEVEL \</div><div class="line">            $KUBE_MASTER \</div><div class="line">            $KUBE_SCHEDULER_ARGS</div><div class="line">Restart=on-failure</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><h4 id="修改-master-配置"><a href="#修改-master-配置" class="headerlink" title="修改 master 配置"></a>修改 master 配置</h4><p>master 需要编辑 config、apiserver、controller-manager、scheduler这四个文件，具体修改如下</p><ul><li>config 通用配置<code>vim /etc/kubernetes/config</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">###</div><div class="line"># kubernetes system config</div><div class="line">#</div><div class="line"># The following values are used to configure various aspects of all</div><div class="line"># kubernetes services, including</div><div class="line">#</div><div class="line">#   kube-apiserver.service</div><div class="line">#   kube-controller-manager.service</div><div class="line">#   kube-scheduler.service</div><div class="line">#   kubelet.service</div><div class="line">#   kube-proxy.service</div><div class="line"># logging to stderr means we get it in the systemd journal</div><div class="line">KUBE_LOGTOSTDERR=&quot;--logtostderr=true&quot;</div><div class="line"></div><div class="line"># journal message level, 0 is debug</div><div class="line">KUBE_LOG_LEVEL=&quot;--v=2&quot;</div><div class="line"></div><div class="line"># Should this cluster be allowed to run privileged docker containers</div><div class="line">KUBE_ALLOW_PRIV=&quot;--allow-privileged=true&quot;</div><div class="line"></div><div class="line"># How the controller-manager, scheduler, and proxy find the apiserver</div><div class="line">KUBE_MASTER=&quot;--master=http://127.0.0.1:8080&quot;</div></pre></td></tr></table></figure><ul><li>apiserver 配置(其他节点只有 IP 不同) <code>vim /etc/kubernetes/apiserver</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">###</div><div class="line"># kubernetes system config</div><div class="line">#</div><div class="line"># The following values are used to configure the kube-apiserver</div><div class="line">#</div><div class="line"></div><div class="line"># The address on the local server to listen to.</div><div class="line">KUBE_API_ADDRESS=&quot;--advertise-address=192.168.7.11 --insecure-bind-address=127.0.0.1 --bind-address=192.168.7.11&quot;</div><div class="line"></div><div class="line"># The port on the local server to listen on.</div><div class="line">KUBE_API_PORT=&quot;--insecure-port=8080 --secure-port=6443&quot;</div><div class="line"></div><div class="line"># Port minions listen on</div><div class="line"># KUBELET_PORT=&quot;--kubelet-port=10250&quot;</div><div class="line"></div><div class="line"># Comma separated list of nodes in the etcd cluster</div><div class="line">KUBE_ETCD_SERVERS=&quot;--etcd-servers=https://192.168.7.11:2379,https://192.168.7.12:2379,https://192.168.7.13:2379&quot;</div><div class="line"></div><div class="line"># Address range to use for services</div><div class="line">KUBE_SERVICE_ADDRESSES=&quot;--service-cluster-ip-range=10.254.0.0/16&quot;</div><div class="line"></div><div class="line"># default admission control policies</div><div class="line">KUBE_ADMISSION_CONTROL=&quot;--admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota&quot;</div><div class="line"></div><div class="line"># Add your own!</div><div class="line">KUBE_API_ARGS=&quot;--authorization-mode=RBAC \</div><div class="line">               --runtime-config=rbac.authorization.k8s.io/v1beta1 \</div><div class="line">               --anonymous-auth=false \</div><div class="line">               --kubelet-https=true \</div><div class="line">               --experimental-bootstrap-token-auth \</div><div class="line">               --token-auth-file=/etc/kubernetes/token.csv \</div><div class="line">               --service-node-port-range=30000-50000 \</div><div class="line">               --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem \</div><div class="line">               --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem \</div><div class="line">               --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</div><div class="line">               --service-account-key-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</div><div class="line">               --etcd-quorum-read=true \</div><div class="line">               --storage-backend=etcd3 \</div><div class="line">               --etcd-cafile=/etc/etcd/ssl/etcd-root-ca.pem \</div><div class="line">               --etcd-certfile=/etc/etcd/ssl/etcd.pem \</div><div class="line">               --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem \</div><div class="line">               --enable-swagger-ui=true \</div><div class="line">               --apiserver-count=3 \</div><div class="line">               --audit-log-maxage=30 \</div><div class="line">               --audit-log-maxbackup=3 \</div><div class="line">               --audit-log-maxsize=100 \</div><div class="line">               --audit-log-path=/var/log/kube-audit/audit.log \</div><div class="line">               --event-ttl=1h&quot;</div></pre></td></tr></table></figure><ul><li>controller-manager 配置 <code>vim /etc/kubernetes/controller-manager</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">###</div><div class="line"># The following values are used to configure the kubernetes controller-manager</div><div class="line"></div><div class="line"># defaults from config and apiserver should be adequate</div><div class="line"></div><div class="line"># Add your own!</div><div class="line">KUBE_CONTROLLER_MANAGER_ARGS=&quot;--address=127.0.0.1 \</div><div class="line">                              --service-cluster-ip-range=10.254.0.0/16 \</div><div class="line">                              --cluster-name=kubernetes \</div><div class="line">                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</div><div class="line">                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</div><div class="line">                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem \</div><div class="line">                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem \</div><div class="line">                              --leader-elect=true \</div><div class="line">                              --node-monitor-grace-period=40s \</div><div class="line">                              --node-monitor-period=5s \</div><div class="line">                              --pod-eviction-timeout=5m0s&quot;</div></pre></td></tr></table></figure><ul><li>scheduler 配置 <code>vim /etc/kubernetes/scheduler</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">###</div><div class="line"># kubernetes scheduler config</div><div class="line"></div><div class="line"># default config should be adequate</div><div class="line"></div><div class="line"># Add your own!</div><div class="line">KUBE_SCHEDULER_ARGS=&quot;--leader-elect=true --address=127.0.0.1&quot;</div></pre></td></tr></table></figure><p>其他 master 节点配置相同，只需要修改以下 IP 地址即可</p><h4 id="启动各-master-节点相关服务"><a href="#启动各-master-节点相关服务" class="headerlink" title="启动各 master 节点相关服务"></a>启动各 master 节点相关服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl start kube-apiserver</div><div class="line">systemctl start kube-controller-manager</div><div class="line">systemctl start kube-scheduler</div><div class="line">systemctl enable kube-apiserver</div><div class="line">systemctl enable kube-controller-manager</div><div class="line">systemctl enable kube-scheduler</div></pre></td></tr></table></figure><h4 id="验证-master-节点功能"><a href="#验证-master-节点功能" class="headerlink" title="验证 master 节点功能"></a>验证 master 节点功能</h4><p><img src="/images/kube-cs.png" alt="验证 master 节点功能" title="验证 master 节点功能"></p><h3 id="部署-node"><a href="#部署-node" class="headerlink" title="部署 node"></a><font color="red">部署 node</font></h3><h4 id="创建-ClusterRoleBinding"><a href="#创建-ClusterRoleBinding" class="headerlink" title="创建 ClusterRoleBinding"></a>创建 ClusterRoleBinding</h4><p>kubelet 启动时向 kube-apiserver 发送 TLS bootstrapping 请求，需要先将 bootstrap token 文件中的 kubelet-bootstrap 用户赋予 system:node-bootstrapper cluster 角色(role)， 然后 kubelet 才能有权限创建认证请求(certificate signing requests)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 在任意 master 执行即可</div><div class="line">kubectl create clusterrolebinding kubelet-bootstrap \</div><div class="line">  --clusterrole=system:node-bootstrapper \</div><div class="line">  --user=kubelet-bootstrap</div></pre></td></tr></table></figure><h4 id="创建-kubelet-的service配置文件"><a href="#创建-kubelet-的service配置文件" class="headerlink" title="创建 kubelet 的service配置文件"></a>创建 kubelet 的service配置文件</h4><p><code>/usr/lib/systemd/system/kubelet.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes Kubelet Server</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line">After=docker.service</div><div class="line">Requires=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">WorkingDirectory=/var/lib/kubelet</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/kubelet</div><div class="line">ExecStart=/usr/local/bin/kubelet \</div><div class="line">            $KUBE_LOGTOSTDERR \</div><div class="line">            $KUBE_LOG_LEVEL \</div><div class="line">            $KUBELET_API_SERVER \</div><div class="line">            $KUBELET_ADDRESS \</div><div class="line">            $KUBELET_PORT \</div><div class="line">            $KUBELET_HOSTNAME \</div><div class="line">            $KUBE_ALLOW_PRIV \</div><div class="line">            $KUBELET_POD_INFRA_CONTAINER \</div><div class="line">            $KUBELET_ARGS</div><div class="line">Restart=on-failure</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><h4 id="创建-kube-proxy-的service配置文件"><a href="#创建-kube-proxy-的service配置文件" class="headerlink" title="创建 kube-proxy 的service配置文件"></a>创建 kube-proxy 的service配置文件</h4><p><code>/usr/lib/systemd/system/kube-proxy.service</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">[Unit]</div><div class="line">Description=Kubernetes Kube-Proxy Server</div><div class="line">Documentation=https://github.com/GoogleCloudPlatform/kubernetes</div><div class="line">After=network.target</div><div class="line"></div><div class="line">[Service]</div><div class="line">EnvironmentFile=-/etc/kubernetes/config</div><div class="line">EnvironmentFile=-/etc/kubernetes/proxy</div><div class="line">ExecStart=/usr/local/bin/kube-proxy \</div><div class="line">        $KUBE_LOGTOSTDERR \</div><div class="line">        $KUBE_LOG_LEVEL \</div><div class="line">        $KUBE_MASTER \</div><div class="line">        $KUBE_PROXY_ARGS</div><div class="line">Restart=on-failure</div><div class="line">LimitNOFILE=65536</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div></pre></td></tr></table></figure><ul><li>config 通用配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">###</div><div class="line"># kubernetes system config</div><div class="line">#</div><div class="line"># The following values are used to configure various aspects of all</div><div class="line"># kubernetes services, including</div><div class="line">#</div><div class="line">#   kube-apiserver.service</div><div class="line">#   kube-controller-manager.service</div><div class="line">#   kube-scheduler.service</div><div class="line">#   kubelet.service</div><div class="line">#   kube-proxy.service</div><div class="line"># logging to stderr means we get it in the systemd journal</div><div class="line">KUBE_LOGTOSTDERR=&quot;--logtostderr=true&quot;</div><div class="line"></div><div class="line"># journal message level, 0 is debug</div><div class="line">KUBE_LOG_LEVEL=&quot;--v=2&quot;</div><div class="line"></div><div class="line"># Should this cluster be allowed to run privileged docker containers</div><div class="line">KUBE_ALLOW_PRIV=&quot;--allow-privileged=true&quot;</div><div class="line"></div><div class="line"># How the controller-manager, scheduler, and proxy find the apiserver</div><div class="line"># KUBE_MASTER=&quot;--master=http://127.0.0.1:8080&quot;</div></pre></td></tr></table></figure><ul><li>kubelet 配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">###</div><div class="line"># kubernetes kubelet (minion) config</div><div class="line"></div><div class="line"># The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)</div><div class="line">KUBELET_ADDRESS=&quot;--address=192.168.7.14&quot;</div><div class="line"></div><div class="line"># The port for the info server to serve on</div><div class="line"># KUBELET_PORT=&quot;--port=10250&quot;</div><div class="line"></div><div class="line"># You may leave this blank to use the actual hostname</div><div class="line">KUBELET_HOSTNAME=&quot;--hostname-override=docker4.node&quot;</div><div class="line"></div><div class="line"># location of the api-server</div><div class="line">#KUBELET_API_SERVER=&quot;--api-servers=http://192.168.7.11:8080&quot;</div><div class="line"></div><div class="line"># Add your own!</div><div class="line">KUBELET_ARGS=&quot;--cgroup-driver=cgroupfs \</div><div class="line">              --cluster-dns=10.254.0.2 \</div><div class="line">              --resolv-conf=/etc/resolv.conf \</div><div class="line">              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig \</div><div class="line">              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig \</div><div class="line">              --require-kubeconfig \</div><div class="line">              --cert-dir=/etc/kubernetes/ssl \</div><div class="line">              --cluster-domain=cluster.local \</div><div class="line">              --hairpin-mode promiscuous-bridge \</div><div class="line">              --serialize-image-pulls=false \</div><div class="line">              --pod-infra-container-image=registry.cn-hangzhou.aliyuncs.com/google_containers/pause-amd64:3.0&quot;</div></pre></td></tr></table></figure><ul><li>proxy 配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">###</div><div class="line"># kubernetes proxy config</div><div class="line"></div><div class="line"># default config should be adequate</div><div class="line"></div><div class="line"># Add your own!</div><div class="line">KUBE_PROXY_ARGS=&quot;--bind-address=192.168.7.14 \</div><div class="line">                 --hostname-override=docker4.node \</div><div class="line">                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig \</div><div class="line">                 --cluster-cidr=10.254.0.0/16&quot;</div></pre></td></tr></table></figure><h4 id="创建-nginx-代理"><a href="#创建-nginx-代理" class="headerlink" title="创建 nginx 代理"></a>创建 nginx 代理</h4><p>根据上面描述的 master HA 架构，此时所有 node 应该连接本地的 nginx 代理，然后 nginx 来负载所有 api server；以下为 nginx 代理相关配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"># 创建配置目录</div><div class="line">mkdir -p /etc/nginx</div><div class="line"></div><div class="line"># 写入代理配置</div><div class="line">cat &lt;&lt; EOF &gt;&gt; /etc/nginx/nginx.conf</div><div class="line">error_log stderr notice;</div><div class="line"></div><div class="line">worker_processes auto;</div><div class="line">events &#123;</div><div class="line">  multi_accept on;</div><div class="line">  use epoll;</div><div class="line">  worker_connections 1024;</div><div class="line">&#125;</div><div class="line"></div><div class="line">stream &#123;</div><div class="line">    upstream kube_apiserver &#123;</div><div class="line">        least_conn;</div><div class="line">        server 192.168.7.11:6443;</div><div class="line">        server 192.168.7.12:6443;</div><div class="line">        server 192.168.7.13:6443;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    server &#123;</div><div class="line">        listen        0.0.0.0:6443;</div><div class="line">        proxy_pass    kube_apiserver;</div><div class="line">        proxy_timeout 10m;</div><div class="line">        proxy_connect_timeout 1s;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">EOF</div><div class="line"></div><div class="line"># 更新权限</div><div class="line">chmod +r /etc/nginx/nginx.conf</div></pre></td></tr></table></figure><p>为了保证 nginx 的可靠性，综合便捷性考虑，node 节点上的 nginx 使用 docker 启动，同时 使用 systemd 来守护， systemd 配置如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">cat &lt;&lt; EOF &gt;&gt; /etc/systemd/system/nginx-proxy.service</div><div class="line">[Unit]</div><div class="line">Description=kubernetes apiserver docker wrapper</div><div class="line">Wants=docker.socket</div><div class="line">After=docker.service</div><div class="line"></div><div class="line">[Service]</div><div class="line">User=root</div><div class="line">PermissionsStartOnly=true</div><div class="line">ExecStart=/usr/bin/docker run -p 127.0.0.1:6443:6443 \\</div><div class="line">                              -v /etc/nginx:/etc/nginx \\</div><div class="line">                              --name nginx-proxy \\</div><div class="line">                              --net=host \\</div><div class="line">                              --restart=on-failure:5 \\</div><div class="line">                              --memory=512M \\</div><div class="line">                              nginx:1.13.3-alpine</div><div class="line">ExecStartPre=-/usr/bin/docker rm -f nginx-proxy</div><div class="line">ExecStop=/usr/bin/docker stop nginx-proxy</div><div class="line">Restart=always</div><div class="line">RestartSec=15s</div><div class="line">TimeoutStartSec=30s</div><div class="line"></div><div class="line">[Install]</div><div class="line">WantedBy=multi-user.target</div><div class="line">EOF</div></pre></td></tr></table></figure><h4 id="启动-kubelet、nginx-proxy"><a href="#启动-kubelet、nginx-proxy" class="headerlink" title="启动 kubelet、nginx-proxy"></a>启动 kubelet、nginx-proxy</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">systemctl daemon-reload</div><div class="line">systemctl start kubelet</div><div class="line">systemctl enable kubelet</div><div class="line">systemctl start kube-proxy</div><div class="line">systemctl enable kube-proxy</div><div class="line">systemctl start nginx-proxy</div><div class="line">systemctl enable nginx-proxy</div></pre></td></tr></table></figure><h4 id="master-节点验证连通性"><a href="#master-节点验证连通性" class="headerlink" title="master 节点验证连通性"></a>master 节点验证连通性</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">kubectl --server https://192.168.7.11:6443 --certificate-authority /etc/kubernetes/ssl/k8s-root-ca.pem --client-certificate /etc/kubernetes/ssl/admin.pem --client-key /etc/kubernetes/ssl/admin-key.pem get cs</div></pre></td></tr></table></figure><p><img src="/images/ktl.png" alt="验证 master 节点功能" title="验证 master 节点功能"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"># 查看 csr</div><div class="line">➜  kubectl get csr</div><div class="line">NAME                                                   AGE  REQUESTOR           CONDITION</div><div class="line">node-csr-PhOGHB8BpFuNoYtnCGka4NTaxtDQDRjrctZtdaVsijY   2m   kubelet-bootstrap   Pending</div><div class="line"></div><div class="line"># 签发证书</div><div class="line">➜  kubectl certificate approve node-csr-PhOGHB8BpFuNoYtnCGka4NTaxtDQDRjrctZtdaVsijY</div><div class="line">certificatesigningrequest &quot;node-csr-PhOGHB8BpFuNoYtnCGka4NTaxtDQDRjrctZtdaVsijY&quot; approved</div><div class="line"></div><div class="line"># 查看 node</div><div class="line">➜  kubectl get node</div><div class="line">NAME           STATUS    AGE       VERSION</div><div class="line">docker4.node   Ready     20s       v1.7.4</div></pre></td></tr></table></figure><h3 id="安装-kubedns-插件"><a href="#安装-kubedns-插件" class="headerlink" title="安装 kubedns 插件"></a><font color="red">安装 kubedns 插件</font></h3><h3 id="安装-dashboard-插件"><a href="#安装-dashboard-插件" class="headerlink" title="安装 dashboard 插件"></a><font color="red">安装 dashboard 插件</font></h3><h3 id="安装-heapster-插件"><a href="#安装-heapster-插件" class="headerlink" title="安装 heapster 插件"></a><font color="red">安装 heapster 插件</font></h3><h3 id="安装-EFK-插件"><a href="#安装-EFK-插件" class="headerlink" title="安装 EFK 插件"></a><font color="red">安装 EFK 插件</font></h3><h3 id="部署-harbor-私有仓库"><a href="#部署-harbor-私有仓库" class="headerlink" title="部署 harbor 私有仓库"></a><font color="red">部署 harbor 私有仓库</font></h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用virtualbox-vagrant安装centos7&quot;&gt;&lt;a href=&quot;#使用virtualbox-vagrant安装centos7&quot; class=&quot;headerlink&quot; title=&quot;使用virtualbox + vagrant安装centos7&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="devops" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/"/>
    
      <category term="kubernetes" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/devops/kubernetes/"/>
    
    
  </entry>
  
  <entry>
    <title>悟透自己</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/09/%E6%82%9F%E9%80%8F%E8%87%AA%E5%B7%B1/"/>
    <id>http://博客说写.我爱你/2017/09/09/悟透自己/</id>
    <published>2017-09-08T19:00:51.000Z</published>
    <updated>2017-09-08T19:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;人生在世,和“自己”相处最多, 但是往往悟不透“自己”.  </p><p>&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;人生走上坡路时,往往把自己估计过高,似乎一切所求的东西都能唾手可得,甚至把运气和机遇也看作自己身价的一部分而喜不自胜.人在不得意时,又往往把自己估计过低,把困难和不利也看做自己的无能,以至于把安分守己,与世无争误认为有自知之明,而实际上往往被怯懦的面具窒息了自己鲜活的生命.</p><p>&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;悟透自己,就是正确认识自己,也就是说要做一个冷静的现实主义者,既知道自己的优势,也知道自己的不足.我们可以憧憬人生,但期望值不能过高.因为在现实中,理想总是会打折扣的.可以迎接挑战.但是必须清楚自己努力的方向.也就是说,人一旦有了自知之明,也就没有什么克服不了的困难,没有什么过不去的难关.      </p><p>&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;要悟透自己就要欣赏自己.无论你是一棵参天大树,还是一棵小草,无论你成为一座巍峨的高山,还是一快小小的石头,都是一种天然,都有自己存在的价值.只要你认真的欣赏自己,你就会拥有一个真正的自我.只有自我欣赏才会有信心,一旦拥有了信心也就会拥有了抵御一切逆境的动力.</p><p>&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;要悟透自己,就要心疼自己.在气愤时心疼一下自己,找个僻静处散散心,宣泄宣泄,不要让那些无名之火伤身;忧郁时,要心疼一下自己,找三五好友,诉说诉说,让感情的阴天变晴;劳累时,你要心疼一下自己,为自己来一番问寒问暖,要明白人所拥有的不过是一个血肉之躯,经不住太多的风力霜剑;有病时,你要心疼一下自己,惟有对自己的心疼,才是战胜疾病的信心和力量.      </p><p>&emsp;&emsp;&nbsp;&nbsp;&nbsp;&nbsp;悟透了自己,才能把握住自己,你生活才会有滋有味!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;人生在世,和“自己”相处最多, 但是往往悟不透“自己”.  &lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;人生走上坡路时,往往把自己估计过高,似乎一切所求的东西
      
    
    </summary>
    
      <category term="ESSAYS" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/ESSAYS/"/>
    
    
  </entry>
  
  <entry>
    <title>JDK安装配置</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/08/JDK%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
    <id>http://博客说写.我爱你/2017/09/08/JDK安装配置/</id>
    <published>2017-09-08T11:47:55.000Z</published>
    <updated>2018-01-04T14:52:14.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ubuntu"><a href="#ubuntu" class="headerlink" title="ubuntu"></a><font color="red">ubuntu</font></h3><p>1、解压文件并修改文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar zxvf jdk-7u21-linux-i586.tar.gz -C /usr/lib/</div></pre></td></tr></table></figure><p>进入到安装目录中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cd /usr/lib/</div></pre></td></tr></table></figure><p>修改文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mv jdk1.7.0_21 java</div></pre></td></tr></table></figure><p>2、添加环境变量使用vim ~/.bashrc命令编辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/java</div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</div><div class="line">export CLASSPATH=.:$&#123;JAVA_HOME&#125;/lib:$&#123;JRE_HOME&#125;/lib</div><div class="line">export PATH=$&#123;JAVA_HOME&#125;/bin:$PATH</div></pre></td></tr></table></figure><p>3、激活环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source ~/.bashrc</div></pre></td></tr></table></figure><p>4、告诉ubuntu系统，我们使用的sun的JDK，而非OpenJDK了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/jdk1.8.0_20/bin/java 300</div><div class="line">$ sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/jdk1.8.0_20/bin/javac 300</div><div class="line">$ sudo update-alternatives --config java</div></pre></td></tr></table></figure><p>如果最后一步没有显示你有多个jdk，那么就无视他。到此结束配置。如果有请看下一步。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ sudo update-alternatives --config java</div><div class="line">有 2 个候选项可用于替换 java (提供 /usr/bin/java)。选择    路径                                      </div><div class="line">优先级  状态------------------------------------------------------------* 0      </div><div class="line">/usr/lib/jvm/java-6-openjdk/jre/bin/java   1061   自动模式  1      </div><div class="line">/usr/lib/jvm/java-6-openjdk/jre/bin/java   1061   手动模式  2      </div><div class="line">/usr/lib/jvm/jdk1.8.0_05/bin/java          300    手动模式</div></pre></td></tr></table></figure></p><p>要维持当前值[*]请按回车键，或者键入选择的编号：？你想用那个输那个。<br>如上所示，这样就设置好了要使用的java了。</p><h3 id="centos"><a href="#centos" class="headerlink" title="centos"></a><font color="red">centos</font></h3><p>1、查看JDK信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -qa | grep java</div></pre></td></tr></table></figure><p>2、卸载OpenJDK——在 步骤 1中 复制所有的 openjdk卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rpm -e --nodeps java-1.7.0-openjdk-headless-1.7.0.71-2.5.3.1.el7_0.x86_64</div></pre></td></tr></table></figure><p>3、安装jdk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo tar -zxvf yourjdk.tar.gz -C /usr/lib</div></pre></td></tr></table></figure><p>4、配置JDK环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/lib/jdk1.8.0_92</div><div class="line">export JRE_HOME=$&#123;JAVA_HOME&#125;/jre</div><div class="line">export PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</div><div class="line">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib</div></pre></td></tr></table></figure><p>5、为了使编译生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure><p>6、查看path值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo $PATH</div></pre></td></tr></table></figure><h3 id="Mac"><a href="#Mac" class="headerlink" title="Mac"></a><font color="red">Mac</font></h3><p>官网下载dmg版本安装后配置环境如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim ~/.bash_profile</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;ubuntu&quot;&gt;&lt;a href=&quot;#ubuntu&quot; class=&quot;headerlink&quot; title=&quot;ubuntu&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;ubuntu&lt;/font&gt;&lt;/h3&gt;&lt;p&gt;1、解压文件并修改文件名&lt;/p&gt;
&lt;figure clas
      
    
    </summary>
    
      <category term="JAVA" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/JAVA/"/>
    
      <category term="config" scheme="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/categories/JAVA/config/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://%E5%8D%9A%E5%AE%A2%E8%AF%B4%E5%86%99.%E6%88%91%E7%88%B1%E4%BD%A0/2017/09/07/hello-world/"/>
    <id>http://博客说写.我爱你/2017/09/07/hello-world/</id>
    <published>2017-09-07T07:28:33.000Z</published>
    <updated>2017-09-07T07:28:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
